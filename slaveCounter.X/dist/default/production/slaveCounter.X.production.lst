

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 15 16:49:51 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  0105                     	;# 
   119  0107                     	;# 
   120  0108                     	;# 
   121  0109                     	;# 
   122  010C                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0185                     	;# 
   128  0187                     	;# 
   129  0188                     	;# 
   130  0189                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  000E                     	;# 
   227  000F                     	;# 
   228  0010                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001D                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  0087                     	;# 
   250  0088                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289                           
   290                           	psect	idataCOMMON
   291  0100                     __pidataCOMMON:
   292                           
   293                           ;initializer for _portbActual
   294  0100  34FF               	retlw	255
   295                           
   296                           ;initializer for _portbAnterior
   297  0101  34FF               	retlw	255
   298  0013                     _SSPBUF	set	19
   299  0014                     _SSPCON	set	20
   300  000C                     _PIR1bits	set	12
   301  0006                     _PORTB	set	6
   302  0012                     _T2CON	set	18
   303  000D                     _PIR2	set	13
   304  000B                     _INTCONbits	set	11
   305  0008                     _PORTD	set	8
   306  0094                     _SSPSTATbits	set	148
   307  0094                     _SSPSTAT	set	148
   308  008C                     _PIE1bits	set	140
   309  0081                     _OPTION_REGbits	set	129
   310  0096                     _IOCB	set	150
   311  0088                     _TRISD	set	136
   312  043B                     _TRISC3	set	1083
   313  043D                     _TRISC5	set	1085
   314  0189                     _ANSELH	set	393
   315  0188                     _ANSEL	set	392
   316                           
   317                           	psect	cinit
   318  000F                     start_initialization:	
   319                           ; #config settings
   320                           
   321  000F                     __initialization:
   322                           
   323                           ; Initialize objects allocated to COMMON
   324  000F  120A  118A  2100  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   325  0014  00F8               	movwf	__pdataCOMMON& (0+127)
   326  0015  120A  118A  2101  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   327  001A  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   328                           
   329                           ; Clear objects allocated to BANK0
   330  001B  01A0               	clrf	__pbssBANK0& (0+127)
   331  001C  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   332  001D  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   333  001E  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   334                           
   335                           ; Clear objects allocated to COMMON
   336  001F  01F5               	clrf	__pbssCOMMON& (0+127)
   337  0020  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   338  0021  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   339  0022                     end_of_initialization:	
   340                           ;End of C runtime variable initialization code
   341                           
   342  0022                     __end_of__initialization:
   343  0022  0183               	clrf	3
   344  0023  120A  118A  28A4   	ljmp	_main	;jump to C main() function
   345                           
   346                           	psect	bssCOMMON
   347  0075                     __pbssCOMMON:
   348  0075                     _micros:
   349  0075                     	ds	2
   350  0077                     _valor:
   351  0077                     	ds	1
   352                           
   353                           	psect	dataCOMMON
   354  0078                     __pdataCOMMON:
   355  0078                     _portbActual:
   356  0078                     	ds	1
   357  0079                     _portbAnterior:
   358  0079                     	ds	1
   359                           
   360                           	psect	bssBANK0
   361  0020                     __pbssBANK0:
   362  0020                     _timeB2:
   363  0020                     	ds	2
   364  0022                     _timeB1:
   365  0022                     	ds	2
   366                           
   367                           	psect	cstackCOMMON
   368  0070                     __pcstackCOMMON:
   369  0070                     ?_spiRead:
   370  0070                     ??_spiRead:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_spiWrite:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ??_spiWrite:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_main:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_isr:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_spiReceiveWait:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ??_spiReceiveWait:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     spiWrite@dat:	
   392                           ; 1 bytes @ 0x0
   393                           
   394                           
   395                           ; 1 bytes @ 0x0
   396  0070                     	ds	1
   397  0071                     ??_isr:
   398                           
   399                           ; 1 bytes @ 0x1
   400  0071                     	ds	4
   401                           
   402                           	psect	cstackBANK0
   403  0024                     __pcstackBANK0:
   404  0024                     ?_spiInit:
   405  0024                     spiInit@sDataSample:	
   406                           ; 1 bytes @ 0x0
   407                           
   408                           
   409                           ; 1 bytes @ 0x0
   410  0024                     	ds	1
   411  0025                     spiInit@sClockIdle:
   412                           
   413                           ; 1 bytes @ 0x1
   414  0025                     	ds	1
   415  0026                     spiInit@sTransmitEdge:
   416                           
   417                           ; 1 bytes @ 0x2
   418  0026                     	ds	1
   419  0027                     ??_spiInit:
   420  0027                     spiInit@sType:	
   421                           ; 1 bytes @ 0x3
   422                           
   423                           
   424                           ; 1 bytes @ 0x3
   425  0027                     	ds	1
   426  0028                     ??_main:
   427                           
   428                           	psect	maintext
   429  00A4                     __pmaintext:	
   430                           ; 1 bytes @ 0x4
   431 ;;
   432 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   433 ;;
   434 ;; *************** function _main *****************
   435 ;; Defined at:
   436 ;;		line 40 in file "main.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, status,2, status,0, pclath, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : B00/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   450 ;;      Params:         0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0
   453 ;;      Totals:         0       0       0       0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels required when called:    4
   456 ;; This function calls:
   457 ;;		_spiInit
   458 ;; This function is called by:
   459 ;;		Startup code after reset
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           
   464                           ;psect for function _main
   465  00A4                     _main:
   466  00A4                     l889:	
   467                           ;incstack = 0
   468                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   469                           
   470                           
   471                           ;main.c: 41:     ANSEL = 1;
   472  00A4  3001               	movlw	1
   473  00A5  1683               	bsf	3,5	;RP0=1, select bank3
   474  00A6  1703               	bsf	3,6	;RP1=1, select bank3
   475  00A7  0088               	movwf	8	;volatile
   476  00A8                     l891:
   477                           
   478                           ;main.c: 42:     ANSELH = 0;
   479  00A8  0189               	clrf	9	;volatile
   480  00A9                     l893:
   481                           
   482                           ;main.c: 43:     TRISD = 0;
   483  00A9  1683               	bsf	3,5	;RP0=1, select bank1
   484  00AA  1303               	bcf	3,6	;RP1=0, select bank1
   485  00AB  0188               	clrf	8	;volatile
   486  00AC                     l895:
   487                           
   488                           ;main.c: 44:     PORTD = 0;
   489  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   490  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   491  00AE  0188               	clrf	8	;volatile
   492  00AF                     l897:
   493                           
   494                           ;main.c: 45:     IOCB = 255;
   495  00AF  30FF               	movlw	255
   496  00B0  1683               	bsf	3,5	;RP0=1, select bank1
   497  00B1  1303               	bcf	3,6	;RP1=0, select bank1
   498  00B2  0096               	movwf	22	;volatile
   499  00B3                     l899:
   500                           
   501                           ;main.c: 47:     OPTION_REGbits.nRBPU = 0;
   502  00B3  1381               	bcf	1,7	;volatile
   503  00B4                     l901:
   504                           
   505                           ;main.c: 48:     INTCONbits.GIE = 1;
   506  00B4  178B               	bsf	11,7	;volatile
   507  00B5                     l903:
   508                           
   509                           ;main.c: 49:     INTCONbits.PEIE = 1;
   510  00B5  170B               	bsf	11,6	;volatile
   511  00B6                     l905:
   512                           
   513                           ;main.c: 50:     INTCONbits.RBIE = 1;
   514  00B6  158B               	bsf	11,3	;volatile
   515  00B7                     l907:
   516                           
   517                           ;main.c: 51:     PIE1bits.TMR2IE = 1;
   518  00B7  148C               	bsf	12,1	;volatile
   519  00B8                     l909:
   520                           
   521                           ;main.c: 52:     PIE1bits.SSPIE = 1;
   522  00B8  158C               	bsf	12,3	;volatile
   523  00B9                     l911:
   524                           
   525                           ;main.c: 53:     PIR2 = 50;
   526  00B9  3032               	movlw	50
   527  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   528  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   529  00BC  008D               	movwf	13	;volatile
   530  00BD                     l913:
   531                           
   532                           ;main.c: 55:     T2CON = 0b00000100;
   533  00BD  3004               	movlw	4
   534  00BE  0092               	movwf	18	;volatile
   535  00BF                     l915:
   536                           
   537                           ;main.c: 57:     spiInit(SPI_SLAVE_SS_EN,SPI_DATA_SAMPLE_MIDDLE,
   538  00BF  01A4               	clrf	spiInit@sDataSample
   539  00C0  01A5               	clrf	spiInit@sClockIdle
   540  00C1  01A6               	clrf	spiInit@sTransmitEdge
   541  00C2  3024               	movlw	36
   542  00C3  120A  118A  20CC  120A  118A  	fcall	_spiInit
   543  00C8                     l47:	
   544                           ;main.c: 59:     while(1){
   545                           
   546  00C8                     l48:	
   547                           ;main.c: 60:     }
   548                           
   549  00C8  28C8               	goto	l47
   550  00C9  120A  118A  280C   	ljmp	start
   551  00CC                     __end_of_main:
   552                           
   553                           	psect	text1
   554  00CC                     __ptext1:	
   555 ;; *************** function _spiInit *****************
   556 ;; Defined at:
   557 ;;		line 12 in file "spi.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;  sType           1    wreg     enum E1264
   560 ;;  sDataSample     1    0[BANK0 ] enum E1272
   561 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   562 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  sType           1    3[BANK0 ] enum E1264
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   574 ;;      Params:         0       3       0       0       0
   575 ;;      Locals:         0       1       0       0       0
   576 ;;      Temps:          0       0       0       0       0
   577 ;;      Totals:         0       4       0       0       0
   578 ;;Total ram usage:        4 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; Hardware stack levels required when called:    3
   581 ;; This function calls:
   582 ;;		Nothing
   583 ;; This function is called by:
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _spiInit
   590  00CC                     _spiInit:
   591                           
   592                           ;incstack = 0
   593                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   594                           ;spiInit@sType stored from wreg
   595  00CC  1283               	bcf	3,5	;RP0=0, select bank0
   596  00CD  1303               	bcf	3,6	;RP1=0, select bank0
   597  00CE  00A7               	movwf	spiInit@sType
   598  00CF                     l879:
   599                           
   600                           ;spi.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 13: {;spi.c: 14:     TRISC5 = 0;
   601  00CF  1683               	bsf	3,5	;RP0=1, select bank1
   602  00D0  1303               	bcf	3,6	;RP1=0, select bank1
   603  00D1  1287               	bcf	7,5	;volatile
   604                           
   605                           ;spi.c: 15:     if(sType & 0b00000100)
   606  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   607  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   608  00D4  1D27               	btfss	spiInit@sType,2
   609  00D5  28D7               	goto	u251
   610  00D6  28D8               	goto	u250
   611  00D7                     u251:
   612  00D7  28DE               	goto	l885
   613  00D8                     u250:
   614  00D8                     l881:
   615                           
   616                           ;spi.c: 16:     {;spi.c: 17:         SSPSTAT = sTransmitEdge;
   617  00D8  0826               	movf	spiInit@sTransmitEdge,w
   618  00D9  1683               	bsf	3,5	;RP0=1, select bank1
   619  00DA  1303               	bcf	3,6	;RP1=0, select bank1
   620  00DB  0094               	movwf	20	;volatile
   621  00DC                     l883:
   622                           
   623                           ;spi.c: 18:         TRISC3 = 1;
   624  00DC  1587               	bsf	7,3	;volatile
   625                           
   626                           ;spi.c: 19:     }
   627  00DD  28E4               	goto	l79
   628  00DE                     l885:
   629                           
   630                           ;spi.c: 21:     {;spi.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
   631  00DE  0824               	movf	spiInit@sDataSample,w
   632  00DF  0426               	iorwf	spiInit@sTransmitEdge,w
   633  00E0  1683               	bsf	3,5	;RP0=1, select bank1
   634  00E1  1303               	bcf	3,6	;RP1=0, select bank1
   635  00E2  0094               	movwf	20	;volatile
   636  00E3                     l887:
   637                           
   638                           ;spi.c: 23:         TRISC3 = 0;
   639  00E3  1187               	bcf	7,3	;volatile
   640  00E4                     l79:	
   641                           ;spi.c: 24:     }
   642                           
   643                           
   644                           ;spi.c: 26:     SSPCON = sType | sClockIdle;
   645  00E4  1283               	bcf	3,5	;RP0=0, select bank0
   646  00E5  1303               	bcf	3,6	;RP1=0, select bank0
   647  00E6  0827               	movf	spiInit@sType,w
   648  00E7  0425               	iorwf	spiInit@sClockIdle,w
   649  00E8  0094               	movwf	20	;volatile
   650  00E9                     l80:
   651  00E9  0008               	return
   652  00EA                     __end_of_spiInit:
   653                           
   654                           	psect	text2
   655  0026                     __ptext2:	
   656 ;; *************** function _isr *****************
   657 ;; Defined at:
   658 ;;		line 65 in file "main.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;		None
   661 ;; Auto vars:     Size  Location     Type
   662 ;;		None
   663 ;; Return value:  Size  Location     Type
   664 ;;                  1    wreg      void 
   665 ;; Registers used:
   666 ;;		wreg, status,2, status,0, pclath, cstack
   667 ;; Tracked objects:
   668 ;;		On entry : 0/0
   669 ;;		On exit  : 0/0
   670 ;;		Unchanged: 0/0
   671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   672 ;;      Params:         0       0       0       0       0
   673 ;;      Locals:         0       0       0       0       0
   674 ;;      Temps:          4       0       0       0       0
   675 ;;      Totals:         4       0       0       0       0
   676 ;;Total ram usage:        4 bytes
   677 ;; Hardware stack levels used:    1
   678 ;; Hardware stack levels required when called:    2
   679 ;; This function calls:
   680 ;;		_spiRead
   681 ;;		_spiWrite
   682 ;; This function is called by:
   683 ;;		Interrupt level 1
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           
   688                           ;psect for function _isr
   689  0026                     _isr:
   690  0026                     i1l835:
   691                           
   692                           ;main.c: 66:     if (INTCONbits.RBIF){
   693  0026  1C0B               	btfss	11,0	;volatile
   694  0027  2829               	goto	u15_21
   695  0028  282A               	goto	u15_20
   696  0029                     u15_21:
   697  0029  2875               	goto	i1l861
   698  002A                     u15_20:
   699  002A                     i1l837:
   700                           
   701                           ;main.c: 67:         portbAnterior = portbActual;
   702  002A  0878               	movf	_portbActual,w	;volatile
   703  002B  00F1               	movwf	??_isr
   704  002C  0871               	movf	??_isr,w
   705  002D  00F9               	movwf	_portbAnterior	;volatile
   706                           
   707                           ;main.c: 68:         portbActual = PORTB;
   708  002E  1283               	bcf	3,5	;RP0=0, select bank0
   709  002F  1303               	bcf	3,6	;RP1=0, select bank0
   710  0030  0806               	movf	6,w	;volatile
   711  0031  00F1               	movwf	??_isr
   712  0032  0871               	movf	??_isr,w
   713  0033  00F8               	movwf	_portbActual	;volatile
   714  0034                     i1l839:
   715                           
   716                           ;main.c: 70:         if ((portbAnterior & 1) == 0 && (portbActual & 1) == 1){
   717  0034  1879               	btfsc	_portbAnterior,0	;volatile
   718  0035  2837               	goto	u16_21
   719  0036  2838               	goto	u16_20
   720  0037                     u16_21:
   721  0037  2855               	goto	i1l849
   722  0038                     u16_20:
   723  0038                     i1l841:
   724  0038  1C78               	btfss	_portbActual,0	;volatile
   725  0039  283B               	goto	u17_21
   726  003A  283C               	goto	u17_20
   727  003B                     u17_21:
   728  003B  2855               	goto	i1l849
   729  003C                     u17_20:
   730  003C                     i1l843:
   731                           
   732                           ;main.c: 72:             if (micros - timeB1 >= 50){
   733  003C  0822               	movf	_timeB1,w	;volatile
   734  003D  0275               	subwf	_micros,w	;volatile
   735  003E  00F1               	movwf	??_isr
   736  003F  0823               	movf	_timeB1+1,w	;volatile
   737  0040  1C03               	skipc
   738  0041  0A23               	incf	_timeB1+1,w	;volatile
   739  0042  0276               	subwf	_micros+1,w	;volatile
   740  0043  00F2               	movwf	??_isr+1
   741  0044  3000               	movlw	0
   742  0045  0272               	subwf	??_isr+1,w
   743  0046  3032               	movlw	50
   744  0047  1903               	skipnz
   745  0048  0271               	subwf	??_isr,w
   746  0049  1C03               	skipc
   747  004A  284C               	goto	u18_21
   748  004B  284D               	goto	u18_20
   749  004C                     u18_21:
   750  004C  2855               	goto	i1l849
   751  004D                     u18_20:
   752  004D                     i1l845:
   753                           
   754                           ;main.c: 75:                 timeB1 = micros;
   755  004D  0876               	movf	_micros+1,w	;volatile
   756  004E  00A3               	movwf	_timeB1+1	;volatile
   757  004F  0875               	movf	_micros,w	;volatile
   758  0050  00A2               	movwf	_timeB1	;volatile
   759  0051                     i1l847:
   760                           
   761                           ;main.c: 76:                 PORTD++;
   762  0051  3001               	movlw	1
   763  0052  00F1               	movwf	??_isr
   764  0053  0871               	movf	??_isr,w
   765  0054  0788               	addwf	8,f	;volatile
   766  0055                     i1l849:
   767                           
   768                           ;main.c: 80:         if((portbAnterior & 2) == 0 && (portbActual & 2) == 2){
   769  0055  18F9               	btfsc	_portbAnterior,1	;volatile
   770  0056  2858               	goto	u19_21
   771  0057  2859               	goto	u19_20
   772  0058                     u19_21:
   773  0058  2874               	goto	i1l859
   774  0059                     u19_20:
   775  0059                     i1l851:
   776  0059  1CF8               	btfss	_portbActual,1	;volatile
   777  005A  285C               	goto	u20_21
   778  005B  285D               	goto	u20_20
   779  005C                     u20_21:
   780  005C  2874               	goto	i1l859
   781  005D                     u20_20:
   782  005D                     i1l853:
   783                           
   784                           ;main.c: 81:             if(micros - timeB2 >= 50){
   785  005D  0820               	movf	_timeB2,w	;volatile
   786  005E  0275               	subwf	_micros,w	;volatile
   787  005F  00F1               	movwf	??_isr
   788  0060  0821               	movf	_timeB2+1,w	;volatile
   789  0061  1C03               	skipc
   790  0062  0A21               	incf	_timeB2+1,w	;volatile
   791  0063  0276               	subwf	_micros+1,w	;volatile
   792  0064  00F2               	movwf	??_isr+1
   793  0065  3000               	movlw	0
   794  0066  0272               	subwf	??_isr+1,w
   795  0067  3032               	movlw	50
   796  0068  1903               	skipnz
   797  0069  0271               	subwf	??_isr,w
   798  006A  1C03               	skipc
   799  006B  286D               	goto	u21_21
   800  006C  286E               	goto	u21_20
   801  006D                     u21_21:
   802  006D  2874               	goto	i1l859
   803  006E                     u21_20:
   804  006E                     i1l855:
   805                           
   806                           ;main.c: 82:                 timeB2 = micros;
   807  006E  0876               	movf	_micros+1,w	;volatile
   808  006F  00A1               	movwf	_timeB2+1	;volatile
   809  0070  0875               	movf	_micros,w	;volatile
   810  0071  00A0               	movwf	_timeB2	;volatile
   811  0072                     i1l857:
   812                           
   813                           ;main.c: 83:                 PORTD--;
   814  0072  3001               	movlw	1
   815  0073  0288               	subwf	8,f	;volatile
   816  0074                     i1l859:
   817                           
   818                           ;main.c: 87:         INTCONbits.RBIF = 0;
   819  0074  100B               	bcf	11,0	;volatile
   820  0075                     i1l861:
   821                           
   822                           ;main.c: 89:      if (PIR1bits.TMR2IF){
   823  0075  1283               	bcf	3,5	;RP0=0, select bank0
   824  0076  1303               	bcf	3,6	;RP1=0, select bank0
   825  0077  1C8C               	btfss	12,1	;volatile
   826  0078  287A               	goto	u22_21
   827  0079  287B               	goto	u22_20
   828  007A                     u22_21:
   829  007A  2882               	goto	i1l867
   830  007B                     u22_20:
   831  007B                     i1l863:
   832                           
   833                           ;main.c: 90:         PIR1bits.TMR2IF = 0;
   834  007B  108C               	bcf	12,1	;volatile
   835  007C                     i1l865:
   836                           
   837                           ;main.c: 91:         micros+= 50;
   838  007C  3032               	movlw	50
   839  007D  07F5               	addwf	_micros,f	;volatile
   840  007E  1803               	skipnc
   841  007F  0AF6               	incf	_micros+1,f	;volatile
   842  0080  3000               	movlw	0
   843  0081  07F6               	addwf	_micros+1,f	;volatile
   844  0082                     i1l867:
   845                           
   846                           ;main.c: 95:     if(PIR1bits.SSPIF){
   847  0082  1D8C               	btfss	12,3	;volatile
   848  0083  2885               	goto	u23_21
   849  0084  2886               	goto	u23_20
   850  0085                     u23_21:
   851  0085  289D               	goto	i1l63
   852  0086                     u23_20:
   853  0086                     i1l869:
   854                           
   855                           ;main.c: 96:         PIR1bits.SSPIF = 0;
   856  0086  118C               	bcf	12,3	;volatile
   857  0087                     i1l871:
   858                           
   859                           ;main.c: 97:         valor = spiRead();
   860  0087  120A  118A  20EA  120A  118A  	fcall	_spiRead
   861  008C  00F1               	movwf	??_isr
   862  008D  0871               	movf	??_isr,w
   863  008E  00F7               	movwf	_valor
   864  008F                     i1l873:
   865                           
   866                           ;main.c: 98:         if(valor == 'C') spiWrite(PORTD);
   867  008F  3043               	movlw	67
   868  0090  0677               	xorwf	_valor,w
   869  0091  1D03               	btfss	3,2
   870  0092  2894               	goto	u24_21
   871  0093  2895               	goto	u24_20
   872  0094                     u24_21:
   873  0094  289D               	goto	i1l63
   874  0095                     u24_20:
   875  0095                     i1l875:
   876  0095  1283               	bcf	3,5	;RP0=0, select bank0
   877  0096  1303               	bcf	3,6	;RP1=0, select bank0
   878  0097  0808               	movf	8,w	;volatile
   879  0098  120A  118A  20FA  120A  118A  	fcall	_spiWrite
   880  009D                     i1l63:
   881  009D  0874               	movf	??_isr+3,w
   882  009E  008A               	movwf	10
   883  009F  0E73               	swapf	??_isr+2,w
   884  00A0  0083               	movwf	3
   885  00A1  0EFE               	swapf	btemp,f
   886  00A2  0E7E               	swapf	btemp,w
   887  00A3  0009               	retfie
   888  00A4                     __end_of_isr:
   889                           
   890                           	psect	intentry
   891  0004                     __pintentry:	
   892                           ;incstack = 0
   893                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
   894                           
   895  0004                     interrupt_function:
   896  007E                     saved_w	set	btemp
   897  0004  00FE               	movwf	btemp
   898  0005  0E03               	swapf	3,w
   899  0006  00F3               	movwf	??_isr+2
   900  0007  080A               	movf	10,w
   901  0008  00F4               	movwf	??_isr+3
   902  0009  120A  118A  2826   	ljmp	_isr
   903                           
   904                           	psect	text3
   905  00FA                     __ptext3:	
   906 ;; *************** function _spiWrite *****************
   907 ;; Defined at:
   908 ;;		line 34 in file "spi.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  dat             1    wreg     unsigned char 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;  dat             1    0[COMMON] unsigned char 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   922 ;;      Params:         0       0       0       0       0
   923 ;;      Locals:         1       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0
   925 ;;      Totals:         1       0       0       0       0
   926 ;;Total ram usage:        1 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_isr
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           
   936                           ;psect for function _spiWrite
   937  00FA                     _spiWrite:
   938                           
   939                           ;incstack = 0
   940                           ; Regs used in _spiWrite: [wreg]
   941                           ;spiWrite@dat stored from wreg
   942  00FA  00F0               	movwf	spiWrite@dat
   943  00FB                     i1l805:
   944                           
   945                           ;spi.c: 34: void spiWrite(char dat);spi.c: 35: {;spi.c: 36:     SSPBUF = dat;
   946  00FB  0870               	movf	spiWrite@dat,w
   947  00FC  1283               	bcf	3,5	;RP0=0, select bank0
   948  00FD  1303               	bcf	3,6	;RP1=0, select bank0
   949  00FE  0093               	movwf	19	;volatile
   950  00FF                     i1l89:
   951  00FF  0008               	return
   952  0100                     __end_of_spiWrite:
   953                           
   954                           	psect	text4
   955  00EA                     __ptext4:	
   956 ;; *************** function _spiRead *****************
   957 ;; Defined at:
   958 ;;		line 47 in file "spi.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      unsigned char 
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, pclath, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   972 ;;      Params:         0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0
   975 ;;      Totals:         0       0       0       0       0
   976 ;;Total ram usage:        0 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    1
   979 ;; This function calls:
   980 ;;		_spiReceiveWait
   981 ;; This function is called by:
   982 ;;		_isr
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           
   987                           ;psect for function _spiRead
   988  00EA                     _spiRead:
   989  00EA                     i1l799:	
   990                           ;incstack = 0
   991                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   992                           
   993                           
   994                           ;spi.c: 49:     spiReceiveWait();
   995  00EA  120A  118A  20F3  120A  118A  	fcall	_spiReceiveWait
   996  00EF                     i1l801:
   997                           
   998                           ;spi.c: 50:     return(SSPBUF);
   999  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1000  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1001  00F1  0813               	movf	19,w	;volatile
  1002  00F2                     i1l97:
  1003  00F2  0008               	return
  1004  00F3                     __end_of_spiRead:
  1005                           
  1006                           	psect	text5
  1007  00F3                     __ptext5:	
  1008 ;; *************** function _spiReceiveWait *****************
  1009 ;; Defined at:
  1010 ;;		line 29 in file "spi.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		None
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1024 ;;      Params:         0       0       0       0       0
  1025 ;;      Locals:         0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0
  1027 ;;      Totals:         0       0       0       0       0
  1028 ;;Total ram usage:        0 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; This function calls:
  1031 ;;		Nothing
  1032 ;; This function is called by:
  1033 ;;		_spiRead
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           
  1038                           ;psect for function _spiReceiveWait
  1039  00F3                     _spiReceiveWait:
  1040  00F3                     i1l787:	
  1041                           ;incstack = 0
  1042                           ; Regs used in _spiReceiveWait: []
  1043                           
  1044  00F3                     i1l83:	
  1045                           ;spi.c: 31:     while ( !SSPSTATbits.BF );
  1046                           
  1047  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  1048  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  1049  00F5  1C14               	btfss	20,0	;volatile
  1050  00F6  28F8               	goto	u13_21
  1051  00F7  28F9               	goto	u13_20
  1052  00F8                     u13_21:
  1053  00F8  28F3               	goto	i1l83
  1054  00F9                     u13_20:
  1055  00F9                     i1l86:
  1056  00F9  0008               	return
  1057  00FA                     __end_of_spiReceiveWait:
  1058  007E                     btemp	set	126	;btemp
  1059  007E                     wtemp0	set	126
  1060                           
  1061                           	psect	config
  1062                           
  1063                           ;Config register CONFIG1 @ 0x2007
  1064                           ;	Oscillator Selection bits
  1065                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1066                           ;	Watchdog Timer Enable bit
  1067                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1068                           ;	Power-up Timer Enable bit
  1069                           ;	PWRTE = OFF, PWRT disabled
  1070                           ;	RE3/MCLR pin function select bit
  1071                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1072                           ;	Code Protection bit
  1073                           ;	CP = OFF, Program memory code protection is disabled
  1074                           ;	Data Code Protection bit
  1075                           ;	CPD = OFF, Data memory code protection is disabled
  1076                           ;	Brown Out Reset Selection bits
  1077                           ;	BOREN = OFF, BOR disabled
  1078                           ;	Internal External Switchover bit
  1079                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1080                           ;	Fail-Safe Clock Monitor Enabled bit
  1081                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1082                           ;	Low Voltage Programming Enable bit
  1083                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1084                           ;	In-Circuit Debugger Mode bit
  1085                           ;	DEBUG = 0x1, unprogrammed default
  1086  2007                     	org	8199
  1087  2007  20D4               	dw	8404
  1088                           
  1089                           ;Config register CONFIG2 @ 0x2008
  1090                           ;	Brown-out Reset Selection bit
  1091                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1092                           ;	Flash Program Memory Self Write Enable bits
  1093                           ;	WRT = OFF, Write protection off
  1094  2008                     	org	8200
  1095  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      4       8
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _main->_spiInit

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     456
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  4     4      0      22
                                              1 COMMON     4     4      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _spiInit

 _isr (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      4       8       5       10.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      12      12        0.0%
ABS                  0      0      12       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 15 16:49:51 2021

            _SSPSTATbits 0094                       l47 00C8                       l80 00E9  
                     l48 00C8                       l79 00E4                      l901 00B4  
                    l911 00B9                      l903 00B5                      l913 00BD  
                    l905 00B6                      l915 00BF                      l907 00B7  
                    l909 00B8                      l881 00D8                      l883 00DC  
                    l891 00A8                      l885 00DE                      l893 00A9  
                    l887 00E3                      l879 00CF                      l895 00AC  
                    l897 00AF                      l889 00A4                      l899 00B3  
                    u250 00D8                      u251 00D7                      _isr 0026  
                   ?_isr 0070                     _IOCB 0096                     i1l63 009D  
                   _PIR2 000D                     i1l83 00F3                     i1l86 00F9  
                   i1l97 00F2                     i1l89 00FF                     _main 00A4  
                   btemp 007E                     start 000C                    ??_isr 0071  
                  ?_main 0070                    _ANSEL 0188                    _T2CON 0012  
                  i1l801 00EF                    i1l805 00FB                    i1l841 0038  
                  i1l851 0059                    i1l843 003C                    i1l835 0026  
                  i1l853 005D                    i1l845 004D                    i1l837 002A  
                  i1l861 0075                    i1l871 0087                    i1l863 007B  
                  i1l855 006E                    i1l847 0051                    i1l839 0034  
                  i1l873 008F                    i1l865 007C                    i1l857 0072  
                  i1l849 0055                    i1l787 00F3                    i1l875 0095  
                  i1l867 0082                    i1l859 0074                    i1l869 0086  
                  i1l799 00EA                    u20_20 005D                    u20_21 005C  
                  u13_20 00F9                    u21_20 006E                    u13_21 00F8  
                  u21_21 006D                    u22_20 007B                    u22_21 007A  
                  u23_20 0086                    u15_20 002A                    u23_21 0085  
                  u15_21 0029                    u24_20 0095                    u16_20 0038  
                  u24_21 0094                    u16_21 0037                    u17_20 003C  
                  u17_21 003B                    u18_20 004D                    u18_21 004C  
                  u19_20 0059                    u19_21 0058                    _PORTB 0006  
                  _PORTD 0008                    _TRISD 0088                    _valor 0077  
                  pclath 000A          __end_of_spiInit 00EA          __end_of_spiRead 00F3  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 00CC                   ??_main 0028                   _ANSELH 0189  
                 _TRISC3 043B                   _TRISC5 043D                   _SSPCON 0014  
                 _SSPBUF 0013                   _micros 0075                   _timeB1 0022  
                 _timeB2 0020             __pdataCOMMON 0078                   saved_w 007E  
       __end_of_spiWrite 0100                ??_spiInit 0027                ??_spiRead 0070  
__end_of__initialization 0022           __pcstackCOMMON 0070           _OPTION_REGbits 0081  
             __pbssBANK0 0020               __pmaintext 00A4               __pintentry 0004  
__size_of_spiReceiveWait 0007                  _SSPSTAT 0094                ?_spiWrite 0070  
                __ptext1 00CC                  __ptext2 0026                  __ptext3 00FA  
                __ptext4 00EA                  __ptext5 00F3             __size_of_isr 007E  
                _spiInit 00CC                  _spiRead 00EA     end_of_initialization 0022  
             ??_spiWrite 0070              spiWrite@dat 0070           _spiReceiveWait 00F3  
          __pidataCOMMON 0100      start_initialization 000F              __end_of_isr 00A4  
 __end_of_spiReceiveWait 00FA              __pbssCOMMON 0075                ___latbits 0002  
          __pcstackBANK0 0024          ?_spiReceiveWait 0070        __size_of_spiWrite 0006  
               ?_spiInit 0024                 ?_spiRead 0070     spiInit@sTransmitEdge 0026  
      interrupt_function 0004                 _PIE1bits 008C       spiInit@sDataSample 0024  
               _PIR1bits 000C         __size_of_spiInit 001E         __size_of_spiRead 0009  
          __size_of_main 0028                 _spiWrite 00FA             spiInit@sType 0027  
      spiInit@sClockIdle 0025               _INTCONbits 000B            _portbAnterior 0079  
               intlevel1 0000         ??_spiReceiveWait 0070              _portbActual 0078  
