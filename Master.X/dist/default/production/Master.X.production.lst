

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Feb 14 19:51:33 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F887 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  0105                     	;# 
   126  0107                     	;# 
   127  0108                     	;# 
   128  0109                     	;# 
   129  010C                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0185                     	;# 
   135  0187                     	;# 
   136  0188                     	;# 
   137  0189                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  001D                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  0088                     	;# 
   180  0089                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  008F                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0094                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  0105                     	;# 
   204  0107                     	;# 
   205  0108                     	;# 
   206  0109                     	;# 
   207  010C                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  010F                     	;# 
   212  0185                     	;# 
   213  0187                     	;# 
   214  0188                     	;# 
   215  0189                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0088                     	;# 
   258  0089                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  008F                     	;# 
   263  0090                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0095                     	;# 
   271  0096                     	;# 
   272  0097                     	;# 
   273  0098                     	;# 
   274  0099                     	;# 
   275  009A                     	;# 
   276  009B                     	;# 
   277  009C                     	;# 
   278  009D                     	;# 
   279  009E                     	;# 
   280  009F                     	;# 
   281  0105                     	;# 
   282  0107                     	;# 
   283  0108                     	;# 
   284  0109                     	;# 
   285  010C                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  0185                     	;# 
   291  0187                     	;# 
   292  0188                     	;# 
   293  0189                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0013                     	;# 
   317  0014                     	;# 
   318  0015                     	;# 
   319  0015                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001B                     	;# 
   326  001B                     	;# 
   327  001C                     	;# 
   328  001D                     	;# 
   329  001E                     	;# 
   330  001F                     	;# 
   331  0081                     	;# 
   332  0085                     	;# 
   333  0086                     	;# 
   334  0087                     	;# 
   335  0088                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0094                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  009F                     	;# 
   359  0105                     	;# 
   360  0107                     	;# 
   361  0108                     	;# 
   362  0109                     	;# 
   363  010C                     	;# 
   364  010C                     	;# 
   365  010D                     	;# 
   366  010E                     	;# 
   367  010F                     	;# 
   368  0185                     	;# 
   369  0187                     	;# 
   370  0188                     	;# 
   371  0189                     	;# 
   372  018C                     	;# 
   373  018D                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  000E                     	;# 
   390  000F                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0013                     	;# 
   395  0014                     	;# 
   396  0015                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  001D                     	;# 
   407  001E                     	;# 
   408  001F                     	;# 
   409  0081                     	;# 
   410  0085                     	;# 
   411  0086                     	;# 
   412  0087                     	;# 
   413  0088                     	;# 
   414  0089                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  008F                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0093                     	;# 
   423  0093                     	;# 
   424  0093                     	;# 
   425  0094                     	;# 
   426  0095                     	;# 
   427  0096                     	;# 
   428  0097                     	;# 
   429  0098                     	;# 
   430  0099                     	;# 
   431  009A                     	;# 
   432  009B                     	;# 
   433  009C                     	;# 
   434  009D                     	;# 
   435  009E                     	;# 
   436  009F                     	;# 
   437  0105                     	;# 
   438  0107                     	;# 
   439  0108                     	;# 
   440  0109                     	;# 
   441  010C                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  010F                     	;# 
   446  0185                     	;# 
   447  0187                     	;# 
   448  0188                     	;# 
   449  0189                     	;# 
   450  018C                     	;# 
   451  018D                     	;# 
   452  0013                     _SSPBUF	set	19
   453  0014                     _SSPCON	set	20
   454  001A                     _RCREG	set	26
   455  000C                     _PIR1bits	set	12
   456  0019                     _TXREG	set	25
   457  0018                     _RCSTAbits	set	24
   458  0005                     _PORTA	set	5
   459  0048                     _RE0	set	72
   460  0049                     _RE1	set	73
   461  0047                     _RD7	set	71
   462  0046                     _RD6	set	70
   463  0045                     _RD5	set	69
   464  0044                     _RD4	set	68
   465  0043                     _RD3	set	67
   466  0042                     _RD2	set	66
   467  0041                     _RD1	set	65
   468  0040                     _RD0	set	64
   469  0094                     _SSPSTATbits	set	148
   470  0094                     _SSPSTAT	set	148
   471  0087                     _TRISCbits	set	135
   472  0098                     _TXSTAbits	set	152
   473  0099                     _SPBRG	set	153
   474  0085                     _TRISA	set	133
   475  0089                     _TRISE	set	137
   476  0088                     _TRISD	set	136
   477  043B                     _TRISC3	set	1083
   478  043D                     _TRISC5	set	1085
   479  0189                     _ANSELH	set	393
   480  0188                     _ANSEL	set	392
   481                           
   482                           	psect	strings
   483  0003                     __pstrings:
   484  0003                     stringtab:
   485  0003                     __stringtab:
   486                           
   487                           ;	String table - string pointers are 1 byte each
   488  0003  1BFF               	btfsc	btemp+1,7
   489  0004  280D               	ljmp	stringcode
   490  0005  1383               	bcf	3,7
   491  0006  187F               	btfsc	btemp+1,0
   492  0007  1783               	bsf	3,7
   493  0008  0800               	movf	0,w
   494  0009  0A84               	incf	4,f
   495  000A  1903               	skipnz
   496  000B  0AFF               	incf	btemp+1,f
   497  000C  0008               	return
   498  000D                     stringcode:
   499  000D                     stringdir:
   500  000D  3000               	movlw	high stringdir
   501  000E  008A               	movwf	10
   502  000F  0804               	movf	4,w
   503  0010  0A84               	incf	4,f
   504  0011  0782               	addwf	2,f
   505  0012                     __stringbase:
   506  0012  3400               	retlw	0
   507  0013                     __end_of__stringtab:
   508  0013                     STR_1:
   509  0013  3441               	retlw	65	;'A'
   510  0014  3444               	retlw	68	;'D'
   511  0015  3443               	retlw	67	;'C'
   512  0016  343A               	retlw	58	;':'
   513  0017  3420               	retlw	32	;' '
   514  0018  3443               	retlw	67	;'C'
   515  0019  344F               	retlw	79	;'O'
   516  001A  344E               	retlw	78	;'N'
   517  001B  3454               	retlw	84	;'T'
   518  001C  343A               	retlw	58	;':'
   519  001D  3420               	retlw	32	;' '
   520  001E  3454               	retlw	84	;'T'
   521  001F  3445               	retlw	69	;'E'
   522  0020  344D               	retlw	77	;'M'
   523  0021  3450               	retlw	80	;'P'
   524  0022  343A               	retlw	58	;':'
   525  0023  3400               	retlw	0
   526                           
   527                           	psect	cinit
   528  07FC                     start_initialization:	
   529                           ; #config settings
   530                           
   531  07FC                     __initialization:
   532  07FC                     end_of_initialization:	
   533                           ;End of C runtime variable initialization code
   534                           
   535  07FC                     __end_of__initialization:
   536  07FC  0183               	clrf	3
   537  07FD  120A  118A  2E96   	ljmp	_main	;jump to C main() function
   538                           
   539                           	psect	cstackCOMMON
   540  0070                     __pcstackCOMMON:
   541  0070                     ?_spiInit:
   542  0070                     ?_LcdInit:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0070                     ?_spiWrite:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0070                     ??_spiWrite:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0070                     ?_spiRead:	
   552                           ; 1 bytes @ 0x0
   553                           
   554  0070                     ??_spiRead:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ?_uint8ToChar:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ?_LcdPort:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ??_LcdPort:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_LcdCmd:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_LcdWriteChar:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ?_spiReceiveWait:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ??_spiReceiveWait:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?___bmul:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_main:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ?___awdiv:	
   585                           ; 2 bytes @ 0x0
   586                           
   587  0070                     ?___awmod:	
   588                           ; 2 bytes @ 0x0
   589                           
   590  0070                     ?___lldiv:	
   591                           ; 2 bytes @ 0x0
   592                           
   593  0070                     spiInit@sDataSample:	
   594                           ; 4 bytes @ 0x0
   595                           
   596  0070                     spiWrite@dat:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ___bmul@multiplicand:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ___awdiv@divisor:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ___awmod@divisor:	
   606                           ; 2 bytes @ 0x0
   607                           
   608  0070                     ___lldiv@divisor:	
   609                           ; 2 bytes @ 0x0
   610                           
   611                           
   612                           ; 4 bytes @ 0x0
   613  0070                     	ds	1
   614  0071                     ??___bmul:
   615  0071                     LcdPort@value:	
   616                           ; 1 bytes @ 0x1
   617                           
   618  0071                     spiInit@sClockIdle:	
   619                           ; 1 bytes @ 0x1
   620                           
   621                           
   622                           ; 1 bytes @ 0x1
   623  0071                     	ds	1
   624  0072                     ??_LcdCmd:
   625  0072                     ??_LcdWriteChar:	
   626                           ; 1 bytes @ 0x2
   627                           
   628  0072                     spiInit@sTransmitEdge:	
   629                           ; 1 bytes @ 0x2
   630                           
   631  0072                     ___bmul@product:	
   632                           ; 1 bytes @ 0x2
   633                           
   634  0072                     ___awdiv@dividend:	
   635                           ; 1 bytes @ 0x2
   636                           
   637  0072                     ___awmod@dividend:	
   638                           ; 2 bytes @ 0x2
   639                           
   640                           
   641                           ; 2 bytes @ 0x2
   642  0072                     	ds	1
   643  0073                     ??_spiInit:
   644  0073                     LcdWriteChar@value:	
   645                           ; 1 bytes @ 0x3
   646                           
   647  0073                     spiInit@sType:	
   648                           ; 1 bytes @ 0x3
   649                           
   650  0073                     ___bmul@multiplier:	
   651                           ; 1 bytes @ 0x3
   652                           
   653                           
   654                           ; 1 bytes @ 0x3
   655  0073                     	ds	1
   656  0074                     ?_LcdWriteString:
   657  0074                     ??___awdiv:	
   658                           ; 1 bytes @ 0x4
   659                           
   660  0074                     ??___awmod:	
   661                           ; 1 bytes @ 0x4
   662                           
   663  0074                     LcdCmd@value:	
   664                           ; 1 bytes @ 0x4
   665                           
   666  0074                     LcdWriteString@value:	
   667                           ; 1 bytes @ 0x4
   668                           
   669  0074                     ___lldiv@dividend:	
   670                           ; 2 bytes @ 0x4
   671                           
   672                           
   673                           ; 4 bytes @ 0x4
   674  0074                     	ds	1
   675  0075                     ??_LcdInit:
   676  0075                     ?_LcdSetCursor:	
   677                           ; 1 bytes @ 0x5
   678                           
   679  0075                     LcdSetCursor@column:	
   680                           ; 1 bytes @ 0x5
   681                           
   682  0075                     ___awdiv@counter:	
   683                           ; 1 bytes @ 0x5
   684                           
   685  0075                     ___awmod@counter:	
   686                           ; 1 bytes @ 0x5
   687                           
   688                           
   689                           ; 1 bytes @ 0x5
   690  0075                     	ds	1
   691  0076                     ??_LcdSetCursor:
   692  0076                     ??_LcdWriteString:	
   693                           ; 1 bytes @ 0x6
   694                           
   695  0076                     ___awdiv@sign:	
   696                           ; 1 bytes @ 0x6
   697                           
   698  0076                     ___awmod@sign:	
   699                           ; 1 bytes @ 0x6
   700                           
   701                           
   702                           ; 1 bytes @ 0x6
   703  0076                     	ds	1
   704  0077                     ___awdiv@quotient:
   705                           
   706                           ; 2 bytes @ 0x7
   707  0077                     	ds	1
   708  0078                     ??___lldiv:
   709  0078                     LcdSetCursor@row:	
   710                           ; 1 bytes @ 0x8
   711                           
   712                           
   713                           ; 1 bytes @ 0x8
   714  0078                     	ds	1
   715  0079                     ??_uint8ToChar:
   716  0079                     LcdWriteString@i:	
   717                           ; 1 bytes @ 0x9
   718                           
   719  0079                     ___lldiv@quotient:	
   720                           ; 2 bytes @ 0x9
   721                           
   722                           
   723                           ; 4 bytes @ 0x9
   724  0079                     	ds	4
   725  007D                     ___lldiv@counter:
   726                           
   727                           ; 1 bytes @ 0xD
   728  007D                     	ds	1
   729                           
   730                           	psect	cstackBANK0
   731  0020                     __pcstackBANK0:
   732  0020                     ?_UARTInit:
   733  0020                     uint8ToChar@salida:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0020                     UARTInit@baud_rate:	
   737                           ; 4 bytes @ 0x0
   738                           
   739                           
   740                           ; 4 bytes @ 0x0
   741  0020                     	ds	4
   742  0024                     uint8ToChar@temp:
   743  0024                     UARTInit@BRGH:	
   744                           ; 1 bytes @ 0x4
   745                           
   746                           
   747                           ; 1 bytes @ 0x4
   748  0024                     	ds	1
   749  0025                     ??_UARTInit:
   750  0025                     uint8ToChar@value:	
   751                           ; 1 bytes @ 0x5
   752                           
   753                           
   754                           ; 1 bytes @ 0x5
   755  0025                     	ds	4
   756  0029                     ??_main:
   757                           
   758                           ; 1 bytes @ 0x9
   759  0029                     	ds	1
   760  002A                     main@adc:
   761                           
   762                           ; 1 bytes @ 0xA
   763  002A                     	ds	1
   764  002B                     main@adcChar:
   765                           
   766                           ; 1 bytes @ 0xB
   767  002B                     	ds	1
   768                           
   769                           	psect	maintext
   770  0696                     __pmaintext:	
   771 ;;
   772 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   773 ;;
   774 ;; *************** function _main *****************
   775 ;; Defined at:
   776 ;;		line 44 in file "main.c"
   777 ;; Parameters:    Size  Location     Type
   778 ;;		None
   779 ;; Auto vars:     Size  Location     Type
   780 ;;  adcChar         1   11[BANK0 ] PTR unsigned char 
   781 ;;		 -> uint8ToChar@salida(4), 
   782 ;;  adc             1   10[BANK0 ] unsigned char 
   783 ;;  temp            1    0        unsigned char 
   784 ;;  counter         1    0        unsigned char 
   785 ;; Return value:  Size  Location     Type
   786 ;;                  2   32[None  ] int 
   787 ;; Registers used:
   788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : B00/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   794 ;;      Params:         0       0       0       0       0
   795 ;;      Locals:         0       2       0       0       0
   796 ;;      Temps:          0       1       0       0       0
   797 ;;      Totals:         0       3       0       0       0
   798 ;;Total ram usage:        3 bytes
   799 ;; Hardware stack levels required when called:    3
   800 ;; This function calls:
   801 ;;		_LcdInit
   802 ;;		_LcdSetCursor
   803 ;;		_LcdWriteString
   804 ;;		_UARTInit
   805 ;;		_spiInit
   806 ;;		_spiRead
   807 ;;		_spiWrite
   808 ;;		_uint8ToChar
   809 ;; This function is called by:
   810 ;;		Startup code after reset
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           
   815                           ;psect for function _main
   816  0696                     _main:
   817  0696                     l1354:	
   818                           ;incstack = 0
   819                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   820                           
   821                           
   822                           ;main.c: 46:   ANSEL = 0;
   823  0696  1683               	bsf	3,5	;RP0=1, select bank3
   824  0697  1703               	bsf	3,6	;RP1=1, select bank3
   825  0698  0188               	clrf	8	;volatile
   826                           
   827                           ;main.c: 47:   ANSELH = 0;
   828  0699  0189               	clrf	9	;volatile
   829                           
   830                           ;main.c: 49:   TRISD = 0;
   831  069A  1683               	bsf	3,5	;RP0=1, select bank1
   832  069B  1303               	bcf	3,6	;RP1=0, select bank1
   833  069C  0188               	clrf	8	;volatile
   834                           
   835                           ;main.c: 50:   TRISE = 0;
   836  069D  0189               	clrf	9	;volatile
   837                           
   838                           ;main.c: 52:   TRISA = 0;
   839  069E  0185               	clrf	5	;volatile
   840  069F                     l1356:
   841                           
   842                           ;main.c: 54:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE,
   843  069F  01F0               	clrf	spiInit@sDataSample
   844  06A0  01F1               	clrf	spiInit@sClockIdle
   845  06A1  01F2               	clrf	spiInit@sTransmitEdge
   846  06A2  3020               	movlw	32
   847  06A3  120A  118A  2438  120A  118A  	fcall	_spiInit
   848  06A8                     l1358:
   849                           
   850                           ;main.c: 56:   LcdInit();
   851  06A8  120A  118A  24CD  120A  118A  	fcall	_LcdInit
   852  06AD                     l1360:
   853                           
   854                           ;main.c: 57:   UARTInit(9600,1);
   855  06AD  3000               	movlw	0
   856  06AE  1283               	bcf	3,5	;RP0=0, select bank0
   857  06AF  1303               	bcf	3,6	;RP1=0, select bank0
   858  06B0  00A3               	movwf	UARTInit@baud_rate+3
   859  06B1  3000               	movlw	0
   860  06B2  00A2               	movwf	UARTInit@baud_rate+2
   861  06B3  3025               	movlw	37
   862  06B4  00A1               	movwf	UARTInit@baud_rate+1
   863  06B5  3080               	movlw	128
   864  06B6  00A0               	movwf	UARTInit@baud_rate
   865  06B7  01A4               	clrf	UARTInit@BRGH
   866  06B8  0AA4               	incf	UARTInit@BRGH,f
   867  06B9  120A  118A  2703  120A  118A  	fcall	_UARTInit
   868  06BE                     l1362:
   869                           
   870                           ;main.c: 60:   uint8_t adc;;main.c: 61:   uint8_t counter;;main.c: 62:   uint8_t temp;;m
      +                          ain.c: 64:   char* adcChar;;main.c: 65:   LcdSetCursor(1,1);
   871  06BE  01F5               	clrf	LcdSetCursor@column
   872  06BF  0AF5               	incf	LcdSetCursor@column,f
   873  06C0  3001               	movlw	1
   874  06C1  120A  118A  2468  120A  118A  	fcall	_LcdSetCursor
   875  06C6                     l1364:
   876                           
   877                           ;main.c: 66:   LcdWriteString("ADC: CONT: TEMP:");
   878  06C6  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   879  06C7  00F4               	movwf	LcdWriteString@value
   880  06C8  3080               	movlw	128
   881  06C9  00F5               	movwf	LcdWriteString@value+1
   882  06CA  120A  118A  248B  120A  118A  	fcall	_LcdWriteString
   883  06CF                     l1366:
   884                           
   885                           ;main.c: 68:       LcdSetCursor(2,1);
   886  06CF  01F5               	clrf	LcdSetCursor@column
   887  06D0  0AF5               	incf	LcdSetCursor@column,f
   888  06D1  3002               	movlw	2
   889  06D2  120A  118A  2468  120A  118A  	fcall	_LcdSetCursor
   890  06D7                     l1368:
   891                           
   892                           ;main.c: 69:       PORTA = ~ 1;
   893  06D7  30FE               	movlw	254
   894  06D8  1283               	bcf	3,5	;RP0=0, select bank0
   895  06D9  1303               	bcf	3,6	;RP1=0, select bank0
   896  06DA  0085               	movwf	5	;volatile
   897  06DB                     l1370:
   898                           
   899                           ;main.c: 71:       spiWrite(1);
   900  06DB  3001               	movlw	1
   901  06DC  120A  118A  23F8  120A  118A  	fcall	_spiWrite
   902  06E1                     l1372:
   903                           
   904                           ;main.c: 72:       adc = spiRead();
   905  06E1  120A  118A  2405  120A  118A  	fcall	_spiRead
   906  06E6  1283               	bcf	3,5	;RP0=0, select bank0
   907  06E7  1303               	bcf	3,6	;RP1=0, select bank0
   908  06E8  00A9               	movwf	??_main
   909  06E9  0829               	movf	??_main,w
   910  06EA  00AA               	movwf	main@adc
   911  06EB                     l1374:
   912                           
   913                           ;main.c: 73:       adcChar = uint8ToChar(adc);
   914  06EB  082A               	movf	main@adc,w
   915  06EC  120A  118A  256B  120A  118A  	fcall	_uint8ToChar
   916  06F1  1283               	bcf	3,5	;RP0=0, select bank0
   917  06F2  1303               	bcf	3,6	;RP1=0, select bank0
   918  06F3  00A9               	movwf	??_main
   919  06F4  0829               	movf	??_main,w
   920  06F5  00AB               	movwf	main@adcChar
   921  06F6                     l1376:
   922                           
   923                           ;main.c: 74:       LcdWriteString(adcChar);
   924  06F6  082B               	movf	main@adcChar,w
   925  06F7  00F4               	movwf	LcdWriteString@value
   926  06F8  3000               	movlw	0
   927  06F9  00F5               	movwf	LcdWriteString@value+1
   928  06FA  120A  118A  248B  120A  118A  	fcall	_LcdWriteString
   929  06FF  2ECF               	goto	l1366
   930  0700  120A  118A  2800   	ljmp	start
   931  0703                     __end_of_main:
   932                           
   933                           	psect	text1
   934  056B                     __ptext1:	
   935 ;; *************** function _uint8ToChar *****************
   936 ;; Defined at:
   937 ;;		line 81 in file "main.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  value           1    wreg     unsigned char 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  value           1    5[BANK0 ] unsigned char 
   942 ;;  salida          4    0[BANK0 ] unsigned char [4]
   943 ;;  temp            1    4[BANK0 ] unsigned char 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      PTR unsigned char 
   946 ;; Registers used:
   947 ;;		wreg, status,2, status,0, pclath, cstack
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   953 ;;      Params:         0       0       0       0       0
   954 ;;      Locals:         0       6       0       0       0
   955 ;;      Temps:          3       0       0       0       0
   956 ;;      Totals:         3       6       0       0       0
   957 ;;Total ram usage:        9 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; Hardware stack levels required when called:    1
   960 ;; This function calls:
   961 ;;		___awdiv
   962 ;;		___awmod
   963 ;;		___bmul
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           
   970                           ;psect for function _uint8ToChar
   971  056B                     _uint8ToChar:
   972                           
   973                           ;incstack = 0
   974                           ; Regs used in _uint8ToChar: [wreg+status,2+status,0+pclath+cstack]
   975                           ;uint8ToChar@value stored from wreg
   976  056B  1283               	bcf	3,5	;RP0=0, select bank0
   977  056C  1303               	bcf	3,6	;RP1=0, select bank0
   978  056D  00A5               	movwf	uint8ToChar@value
   979  056E                     l1338:
   980                           
   981                           ;main.c: 82:     char salida[4];;main.c: 83:     uint8_t temp;;main.c: 85:     temp = va
      +                          lue/100;
   982  056E  3064               	movlw	100
   983  056F  00F0               	movwf	___awdiv@divisor
   984  0570  3000               	movlw	0
   985  0571  00F1               	movwf	___awdiv@divisor+1
   986  0572  0825               	movf	uint8ToChar@value,w
   987  0573  00F9               	movwf	??_uint8ToChar
   988  0574  01FA               	clrf	??_uint8ToChar+1
   989  0575  0879               	movf	??_uint8ToChar,w
   990  0576  00F2               	movwf	___awdiv@dividend
   991  0577  087A               	movf	??_uint8ToChar+1,w
   992  0578  00F3               	movwf	___awdiv@dividend+1
   993  0579  120A  118A  262F  120A  118A  	fcall	___awdiv
   994  057E  0870               	movf	?___awdiv,w
   995  057F  00FB               	movwf	??_uint8ToChar+2
   996  0580  087B               	movf	??_uint8ToChar+2,w
   997  0581  1283               	bcf	3,5	;RP0=0, select bank0
   998  0582  1303               	bcf	3,6	;RP1=0, select bank0
   999  0583  00A4               	movwf	uint8ToChar@temp
  1000  0584                     l1340:
  1001                           
  1002                           ;main.c: 87:     salida[0] = temp + 48;
  1003  0584  0824               	movf	uint8ToChar@temp,w
  1004  0585  3E30               	addlw	48
  1005  0586  00F9               	movwf	??_uint8ToChar
  1006  0587  0879               	movf	??_uint8ToChar,w
  1007  0588  00A0               	movwf	uint8ToChar@salida
  1008  0589                     l1342:
  1009                           
  1010                           ;main.c: 90:     value -= temp*100;
  1011  0589  3064               	movlw	100
  1012  058A  00F9               	movwf	??_uint8ToChar
  1013  058B  0879               	movf	??_uint8ToChar,w
  1014  058C  00F0               	movwf	___bmul@multiplicand
  1015  058D  0824               	movf	uint8ToChar@temp,w
  1016  058E  120A  118A  2423  120A  118A  	fcall	___bmul
  1017  0593  00FA               	movwf	??_uint8ToChar+1
  1018  0594  087A               	movf	??_uint8ToChar+1,w
  1019  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1020  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1021  0597  02A5               	subwf	uint8ToChar@value,f
  1022  0598                     l1344:
  1023                           
  1024                           ;main.c: 92:     salida[1] = value/10 +48 ;
  1025  0598  300A               	movlw	10
  1026  0599  00F0               	movwf	___awdiv@divisor
  1027  059A  3000               	movlw	0
  1028  059B  00F1               	movwf	___awdiv@divisor+1
  1029  059C  0825               	movf	uint8ToChar@value,w
  1030  059D  00F9               	movwf	??_uint8ToChar
  1031  059E  01FA               	clrf	??_uint8ToChar+1
  1032  059F  0879               	movf	??_uint8ToChar,w
  1033  05A0  00F2               	movwf	___awdiv@dividend
  1034  05A1  087A               	movf	??_uint8ToChar+1,w
  1035  05A2  00F3               	movwf	___awdiv@dividend+1
  1036  05A3  120A  118A  262F  120A  118A  	fcall	___awdiv
  1037  05A8  0870               	movf	?___awdiv,w
  1038  05A9  3E30               	addlw	48
  1039  05AA  00FB               	movwf	??_uint8ToChar+2
  1040  05AB  087B               	movf	??_uint8ToChar+2,w
  1041  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  1042  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  1043  05AE  00A1               	movwf	uint8ToChar@salida+1
  1044  05AF                     l1346:
  1045                           
  1046                           ;main.c: 93:     salida[2] = value % 10 + 48;
  1047  05AF  300A               	movlw	10
  1048  05B0  00F0               	movwf	___awmod@divisor
  1049  05B1  3000               	movlw	0
  1050  05B2  00F1               	movwf	___awmod@divisor+1
  1051  05B3  0825               	movf	uint8ToChar@value,w
  1052  05B4  00F9               	movwf	??_uint8ToChar
  1053  05B5  01FA               	clrf	??_uint8ToChar+1
  1054  05B6  0879               	movf	??_uint8ToChar,w
  1055  05B7  00F2               	movwf	___awmod@dividend
  1056  05B8  087A               	movf	??_uint8ToChar+1,w
  1057  05B9  00F3               	movwf	___awmod@dividend+1
  1058  05BA  120A  118A  2512  120A  118A  	fcall	___awmod
  1059  05BF  0870               	movf	?___awmod,w
  1060  05C0  3E30               	addlw	48
  1061  05C1  00FB               	movwf	??_uint8ToChar+2
  1062  05C2  087B               	movf	??_uint8ToChar+2,w
  1063  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  1064  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  1065  05C5  00A2               	movwf	uint8ToChar@salida+2
  1066  05C6                     l1348:
  1067                           
  1068                           ;main.c: 95:     salida[3] = '\0';
  1069  05C6  01A3               	clrf	uint8ToChar@salida+3
  1070  05C7                     l1350:
  1071                           
  1072                           ;main.c: 97:     return salida;
  1073  05C7  3020               	movlw	(low (uint8ToChar@salida| 0))& (0+255)
  1074  05C8                     l39:
  1075  05C8  0008               	return
  1076  05C9                     __end_of_uint8ToChar:
  1077                           
  1078                           	psect	text2
  1079  0423                     __ptext2:	
  1080 ;; *************** function ___bmul *****************
  1081 ;; Defined at:
  1082 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;  multiplier      1    wreg     unsigned char 
  1085 ;;  multiplicand    1    0[COMMON] unsigned char 
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;  multiplier      1    3[COMMON] unsigned char 
  1088 ;;  product         1    2[COMMON] unsigned char 
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      unsigned char 
  1091 ;; Registers used:
  1092 ;;		wreg, status,2, status,0
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1098 ;;      Params:         1       0       0       0       0
  1099 ;;      Locals:         2       0       0       0       0
  1100 ;;      Temps:          1       0       0       0       0
  1101 ;;      Totals:         4       0       0       0       0
  1102 ;;Total ram usage:        4 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_uint8ToChar
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           
  1112                           ;psect for function ___bmul
  1113  0423                     ___bmul:
  1114                           
  1115                           ;incstack = 0
  1116                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1117                           ;___bmul@multiplier stored from wreg
  1118  0423  00F3               	movwf	___bmul@multiplier
  1119  0424                     l1138:
  1120  0424  01F2               	clrf	___bmul@product
  1121  0425                     l1140:
  1122  0425  1C73               	btfss	___bmul@multiplier,0
  1123  0426  2C28               	goto	u921
  1124  0427  2C29               	goto	u920
  1125  0428                     u921:
  1126  0428  2C2D               	goto	l1144
  1127  0429                     u920:
  1128  0429                     l1142:
  1129  0429  0870               	movf	___bmul@multiplicand,w
  1130  042A  00F1               	movwf	??___bmul
  1131  042B  0871               	movf	??___bmul,w
  1132  042C  07F2               	addwf	___bmul@product,f
  1133  042D                     l1144:
  1134  042D  1003               	clrc
  1135  042E  0DF0               	rlf	___bmul@multiplicand,f
  1136  042F                     l1146:
  1137  042F  1003               	clrc
  1138  0430  0CF3               	rrf	___bmul@multiplier,f
  1139  0431  0873               	movf	___bmul@multiplier,w
  1140  0432  1D03               	btfss	3,2
  1141  0433  2C35               	goto	u931
  1142  0434  2C36               	goto	u930
  1143  0435                     u931:
  1144  0435  2C25               	goto	l1140
  1145  0436                     u930:
  1146  0436                     l1148:
  1147  0436  0872               	movf	___bmul@product,w
  1148  0437                     l292:
  1149  0437  0008               	return
  1150  0438                     __end_of___bmul:
  1151                           
  1152                           	psect	text3
  1153  0512                     __ptext3:	
  1154 ;; *************** function ___awmod *****************
  1155 ;; Defined at:
  1156 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;  divisor         2    0[COMMON] int 
  1159 ;;  dividend        2    2[COMMON] int 
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  sign            1    6[COMMON] unsigned char 
  1162 ;;  counter         1    5[COMMON] unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  2    0[COMMON] int 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1172 ;;      Params:         4       0       0       0       0
  1173 ;;      Locals:         2       0       0       0       0
  1174 ;;      Temps:          1       0       0       0       0
  1175 ;;      Totals:         7       0       0       0       0
  1176 ;;Total ram usage:        7 bytes
  1177 ;; Hardware stack levels used:    1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_uint8ToChar
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           
  1186                           ;psect for function ___awmod
  1187  0512                     ___awmod:
  1188  0512                     l1220:	
  1189                           ;incstack = 0
  1190                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1191                           
  1192  0512  01F6               	clrf	___awmod@sign
  1193  0513                     l1222:
  1194  0513  1FF3               	btfss	___awmod@dividend+1,7
  1195  0514  2D16               	goto	u1111
  1196  0515  2D17               	goto	u1110
  1197  0516                     u1111:
  1198  0516  2D1E               	goto	l1228
  1199  0517                     u1110:
  1200  0517                     l1224:
  1201  0517  09F2               	comf	___awmod@dividend,f
  1202  0518  09F3               	comf	___awmod@dividend+1,f
  1203  0519  0AF2               	incf	___awmod@dividend,f
  1204  051A  1903               	skipnz
  1205  051B  0AF3               	incf	___awmod@dividend+1,f
  1206  051C                     l1226:
  1207  051C  01F6               	clrf	___awmod@sign
  1208  051D  0AF6               	incf	___awmod@sign,f
  1209  051E                     l1228:
  1210  051E  1FF1               	btfss	___awmod@divisor+1,7
  1211  051F  2D21               	goto	u1121
  1212  0520  2D22               	goto	u1120
  1213  0521                     u1121:
  1214  0521  2D27               	goto	l1232
  1215  0522                     u1120:
  1216  0522                     l1230:
  1217  0522  09F0               	comf	___awmod@divisor,f
  1218  0523  09F1               	comf	___awmod@divisor+1,f
  1219  0524  0AF0               	incf	___awmod@divisor,f
  1220  0525  1903               	skipnz
  1221  0526  0AF1               	incf	___awmod@divisor+1,f
  1222  0527                     l1232:
  1223  0527  0870               	movf	___awmod@divisor,w
  1224  0528  0471               	iorwf	___awmod@divisor+1,w
  1225  0529  1903               	btfsc	3,2
  1226  052A  2D2C               	goto	u1131
  1227  052B  2D2D               	goto	u1130
  1228  052C                     u1131:
  1229  052C  2D5C               	goto	l1250
  1230  052D                     u1130:
  1231  052D                     l1234:
  1232  052D  01F5               	clrf	___awmod@counter
  1233  052E  0AF5               	incf	___awmod@counter,f
  1234  052F  2D3B               	goto	l1240
  1235  0530                     l1236:
  1236  0530  3001               	movlw	1
  1237  0531                     u1145:
  1238  0531  1003               	clrc
  1239  0532  0DF0               	rlf	___awmod@divisor,f
  1240  0533  0DF1               	rlf	___awmod@divisor+1,f
  1241  0534  3EFF               	addlw	-1
  1242  0535  1D03               	skipz
  1243  0536  2D31               	goto	u1145
  1244  0537                     l1238:
  1245  0537  3001               	movlw	1
  1246  0538  00F4               	movwf	??___awmod
  1247  0539  0874               	movf	??___awmod,w
  1248  053A  07F5               	addwf	___awmod@counter,f
  1249  053B                     l1240:
  1250  053B  1FF1               	btfss	___awmod@divisor+1,7
  1251  053C  2D3E               	goto	u1151
  1252  053D  2D3F               	goto	u1150
  1253  053E                     u1151:
  1254  053E  2D30               	goto	l1236
  1255  053F                     u1150:
  1256  053F                     l1242:
  1257  053F  0871               	movf	___awmod@divisor+1,w
  1258  0540  0273               	subwf	___awmod@dividend+1,w
  1259  0541  1D03               	skipz
  1260  0542  2D45               	goto	u1165
  1261  0543  0870               	movf	___awmod@divisor,w
  1262  0544  0272               	subwf	___awmod@dividend,w
  1263  0545                     u1165:
  1264  0545  1C03               	skipc
  1265  0546  2D48               	goto	u1161
  1266  0547  2D49               	goto	u1160
  1267  0548                     u1161:
  1268  0548  2D4F               	goto	l1246
  1269  0549                     u1160:
  1270  0549                     l1244:
  1271  0549  0870               	movf	___awmod@divisor,w
  1272  054A  02F2               	subwf	___awmod@dividend,f
  1273  054B  0871               	movf	___awmod@divisor+1,w
  1274  054C  1C03               	skipc
  1275  054D  03F3               	decf	___awmod@dividend+1,f
  1276  054E  02F3               	subwf	___awmod@dividend+1,f
  1277  054F                     l1246:
  1278  054F  3001               	movlw	1
  1279  0550                     u1175:
  1280  0550  1003               	clrc
  1281  0551  0CF1               	rrf	___awmod@divisor+1,f
  1282  0552  0CF0               	rrf	___awmod@divisor,f
  1283  0553  3EFF               	addlw	-1
  1284  0554  1D03               	skipz
  1285  0555  2D50               	goto	u1175
  1286  0556                     l1248:
  1287  0556  3001               	movlw	1
  1288  0557  02F5               	subwf	___awmod@counter,f
  1289  0558  1D03               	btfss	3,2
  1290  0559  2D5B               	goto	u1181
  1291  055A  2D5C               	goto	u1180
  1292  055B                     u1181:
  1293  055B  2D3F               	goto	l1242
  1294  055C                     u1180:
  1295  055C                     l1250:
  1296  055C  0876               	movf	___awmod@sign,w
  1297  055D  1903               	btfsc	3,2
  1298  055E  2D60               	goto	u1191
  1299  055F  2D61               	goto	u1190
  1300  0560                     u1191:
  1301  0560  2D66               	goto	l1254
  1302  0561                     u1190:
  1303  0561                     l1252:
  1304  0561  09F2               	comf	___awmod@dividend,f
  1305  0562  09F3               	comf	___awmod@dividend+1,f
  1306  0563  0AF2               	incf	___awmod@dividend,f
  1307  0564  1903               	skipnz
  1308  0565  0AF3               	incf	___awmod@dividend+1,f
  1309  0566                     l1254:
  1310  0566  0873               	movf	___awmod@dividend+1,w
  1311  0567  00F1               	movwf	?___awmod+1
  1312  0568  0872               	movf	___awmod@dividend,w
  1313  0569  00F0               	movwf	?___awmod
  1314  056A                     l432:
  1315  056A  0008               	return
  1316  056B                     __end_of___awmod:
  1317                           
  1318                           	psect	text4
  1319  062F                     __ptext4:	
  1320 ;; *************** function ___awdiv *****************
  1321 ;; Defined at:
  1322 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;  divisor         2    0[COMMON] int 
  1325 ;;  dividend        2    2[COMMON] int 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  quotient        2    7[COMMON] int 
  1328 ;;  sign            1    6[COMMON] unsigned char 
  1329 ;;  counter         1    5[COMMON] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  2    0[COMMON] int 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1339 ;;      Params:         4       0       0       0       0
  1340 ;;      Locals:         4       0       0       0       0
  1341 ;;      Temps:          1       0       0       0       0
  1342 ;;      Totals:         9       0       0       0       0
  1343 ;;Total ram usage:        9 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_uint8ToChar
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function ___awdiv
  1354  062F                     ___awdiv:
  1355  062F                     l1176:	
  1356                           ;incstack = 0
  1357                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1358                           
  1359  062F  01F6               	clrf	___awdiv@sign
  1360  0630                     l1178:
  1361  0630  1FF1               	btfss	___awdiv@divisor+1,7
  1362  0631  2E33               	goto	u1011
  1363  0632  2E34               	goto	u1010
  1364  0633                     u1011:
  1365  0633  2E3B               	goto	l1184
  1366  0634                     u1010:
  1367  0634                     l1180:
  1368  0634  09F0               	comf	___awdiv@divisor,f
  1369  0635  09F1               	comf	___awdiv@divisor+1,f
  1370  0636  0AF0               	incf	___awdiv@divisor,f
  1371  0637  1903               	skipnz
  1372  0638  0AF1               	incf	___awdiv@divisor+1,f
  1373  0639                     l1182:
  1374  0639  01F6               	clrf	___awdiv@sign
  1375  063A  0AF6               	incf	___awdiv@sign,f
  1376  063B                     l1184:
  1377  063B  1FF3               	btfss	___awdiv@dividend+1,7
  1378  063C  2E3E               	goto	u1021
  1379  063D  2E3F               	goto	u1020
  1380  063E                     u1021:
  1381  063E  2E48               	goto	l1190
  1382  063F                     u1020:
  1383  063F                     l1186:
  1384  063F  09F2               	comf	___awdiv@dividend,f
  1385  0640  09F3               	comf	___awdiv@dividend+1,f
  1386  0641  0AF2               	incf	___awdiv@dividend,f
  1387  0642  1903               	skipnz
  1388  0643  0AF3               	incf	___awdiv@dividend+1,f
  1389  0644                     l1188:
  1390  0644  3001               	movlw	1
  1391  0645  00F4               	movwf	??___awdiv
  1392  0646  0874               	movf	??___awdiv,w
  1393  0647  06F6               	xorwf	___awdiv@sign,f
  1394  0648                     l1190:
  1395  0648  01F7               	clrf	___awdiv@quotient
  1396  0649  01F8               	clrf	___awdiv@quotient+1
  1397  064A                     l1192:
  1398  064A  0870               	movf	___awdiv@divisor,w
  1399  064B  0471               	iorwf	___awdiv@divisor+1,w
  1400  064C  1903               	btfsc	3,2
  1401  064D  2E4F               	goto	u1031
  1402  064E  2E50               	goto	u1030
  1403  064F                     u1031:
  1404  064F  2E87               	goto	l1212
  1405  0650                     u1030:
  1406  0650                     l1194:
  1407  0650  01F5               	clrf	___awdiv@counter
  1408  0651  0AF5               	incf	___awdiv@counter,f
  1409  0652  2E5E               	goto	l1200
  1410  0653                     l1196:
  1411  0653  3001               	movlw	1
  1412  0654                     u1045:
  1413  0654  1003               	clrc
  1414  0655  0DF0               	rlf	___awdiv@divisor,f
  1415  0656  0DF1               	rlf	___awdiv@divisor+1,f
  1416  0657  3EFF               	addlw	-1
  1417  0658  1D03               	skipz
  1418  0659  2E54               	goto	u1045
  1419  065A                     l1198:
  1420  065A  3001               	movlw	1
  1421  065B  00F4               	movwf	??___awdiv
  1422  065C  0874               	movf	??___awdiv,w
  1423  065D  07F5               	addwf	___awdiv@counter,f
  1424  065E                     l1200:
  1425  065E  1FF1               	btfss	___awdiv@divisor+1,7
  1426  065F  2E61               	goto	u1051
  1427  0660  2E62               	goto	u1050
  1428  0661                     u1051:
  1429  0661  2E53               	goto	l1196
  1430  0662                     u1050:
  1431  0662                     l1202:
  1432  0662  3001               	movlw	1
  1433  0663                     u1065:
  1434  0663  1003               	clrc
  1435  0664  0DF7               	rlf	___awdiv@quotient,f
  1436  0665  0DF8               	rlf	___awdiv@quotient+1,f
  1437  0666  3EFF               	addlw	-1
  1438  0667  1D03               	skipz
  1439  0668  2E63               	goto	u1065
  1440  0669  0871               	movf	___awdiv@divisor+1,w
  1441  066A  0273               	subwf	___awdiv@dividend+1,w
  1442  066B  1D03               	skipz
  1443  066C  2E6F               	goto	u1075
  1444  066D  0870               	movf	___awdiv@divisor,w
  1445  066E  0272               	subwf	___awdiv@dividend,w
  1446  066F                     u1075:
  1447  066F  1C03               	skipc
  1448  0670  2E72               	goto	u1071
  1449  0671  2E73               	goto	u1070
  1450  0672                     u1071:
  1451  0672  2E7A               	goto	l1208
  1452  0673                     u1070:
  1453  0673                     l1204:
  1454  0673  0870               	movf	___awdiv@divisor,w
  1455  0674  02F2               	subwf	___awdiv@dividend,f
  1456  0675  0871               	movf	___awdiv@divisor+1,w
  1457  0676  1C03               	skipc
  1458  0677  03F3               	decf	___awdiv@dividend+1,f
  1459  0678  02F3               	subwf	___awdiv@dividend+1,f
  1460  0679                     l1206:
  1461  0679  1477               	bsf	___awdiv@quotient,0
  1462  067A                     l1208:
  1463  067A  3001               	movlw	1
  1464  067B                     u1085:
  1465  067B  1003               	clrc
  1466  067C  0CF1               	rrf	___awdiv@divisor+1,f
  1467  067D  0CF0               	rrf	___awdiv@divisor,f
  1468  067E  3EFF               	addlw	-1
  1469  067F  1D03               	skipz
  1470  0680  2E7B               	goto	u1085
  1471  0681                     l1210:
  1472  0681  3001               	movlw	1
  1473  0682  02F5               	subwf	___awdiv@counter,f
  1474  0683  1D03               	btfss	3,2
  1475  0684  2E86               	goto	u1091
  1476  0685  2E87               	goto	u1090
  1477  0686                     u1091:
  1478  0686  2E62               	goto	l1202
  1479  0687                     u1090:
  1480  0687                     l1212:
  1481  0687  0876               	movf	___awdiv@sign,w
  1482  0688  1903               	btfsc	3,2
  1483  0689  2E8B               	goto	u1101
  1484  068A  2E8C               	goto	u1100
  1485  068B                     u1101:
  1486  068B  2E91               	goto	l1216
  1487  068C                     u1100:
  1488  068C                     l1214:
  1489  068C  09F7               	comf	___awdiv@quotient,f
  1490  068D  09F8               	comf	___awdiv@quotient+1,f
  1491  068E  0AF7               	incf	___awdiv@quotient,f
  1492  068F  1903               	skipnz
  1493  0690  0AF8               	incf	___awdiv@quotient+1,f
  1494  0691                     l1216:
  1495  0691  0878               	movf	___awdiv@quotient+1,w
  1496  0692  00F1               	movwf	?___awdiv+1
  1497  0693  0877               	movf	___awdiv@quotient,w
  1498  0694  00F0               	movwf	?___awdiv
  1499  0695                     l419:
  1500  0695  0008               	return
  1501  0696                     __end_of___awdiv:
  1502                           
  1503                           	psect	text5
  1504  03F8                     __ptext5:	
  1505 ;; *************** function _spiWrite *****************
  1506 ;; Defined at:
  1507 ;;		line 34 in file "spi.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;  dat             1    wreg     unsigned char 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  dat             1    0[COMMON] unsigned char 
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1521 ;;      Params:         0       0       0       0       0
  1522 ;;      Locals:         1       0       0       0       0
  1523 ;;      Temps:          0       0       0       0       0
  1524 ;;      Totals:         1       0       0       0       0
  1525 ;;Total ram usage:        1 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; This function calls:
  1528 ;;		Nothing
  1529 ;; This function is called by:
  1530 ;;		_main
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           
  1535                           ;psect for function _spiWrite
  1536  03F8                     _spiWrite:
  1537                           
  1538                           ;incstack = 0
  1539                           ; Regs used in _spiWrite: [wreg]
  1540                           ;spiWrite@dat stored from wreg
  1541  03F8  00F0               	movwf	spiWrite@dat
  1542  03F9                     l1330:
  1543                           
  1544                           ;spi.c: 34: void spiWrite(char dat);spi.c: 35: {;spi.c: 36:     SSPBUF = dat;
  1545  03F9  0870               	movf	spiWrite@dat,w
  1546  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  1547  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  1548  03FC  0093               	movwf	19	;volatile
  1549  03FD                     l172:
  1550  03FD  0008               	return
  1551  03FE                     __end_of_spiWrite:
  1552                           
  1553                           	psect	text6
  1554  0405                     __ptext6:	
  1555 ;; *************** function _spiRead *****************
  1556 ;; Defined at:
  1557 ;;		line 47 in file "spi.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      unsigned char 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0, pclath, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1571 ;;      Params:         0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0
  1574 ;;      Totals:         0       0       0       0       0
  1575 ;;Total ram usage:        0 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    1
  1578 ;; This function calls:
  1579 ;;		_spiReceiveWait
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           
  1586                           ;psect for function _spiRead
  1587  0405                     _spiRead:
  1588  0405                     l1332:	
  1589                           ;incstack = 0
  1590                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1591                           
  1592                           
  1593                           ;spi.c: 49:     spiReceiveWait();
  1594  0405  120A  118A  23FE  120A  118A  	fcall	_spiReceiveWait
  1595  040A                     l1334:
  1596                           
  1597                           ;spi.c: 50:     return(SSPBUF);
  1598  040A  1283               	bcf	3,5	;RP0=0, select bank0
  1599  040B  1303               	bcf	3,6	;RP1=0, select bank0
  1600  040C  0813               	movf	19,w	;volatile
  1601  040D                     l180:
  1602  040D  0008               	return
  1603  040E                     __end_of_spiRead:
  1604                           
  1605                           	psect	text7
  1606  03FE                     __ptext7:	
  1607 ;; *************** function _spiReceiveWait *****************
  1608 ;; Defined at:
  1609 ;;		line 29 in file "spi.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		None
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1623 ;;      Params:         0       0       0       0       0
  1624 ;;      Locals:         0       0       0       0       0
  1625 ;;      Temps:          0       0       0       0       0
  1626 ;;      Totals:         0       0       0       0       0
  1627 ;;Total ram usage:        0 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_spiRead
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           
  1637                           ;psect for function _spiReceiveWait
  1638  03FE                     _spiReceiveWait:
  1639  03FE                     l1136:	
  1640                           ;incstack = 0
  1641                           ; Regs used in _spiReceiveWait: []
  1642                           
  1643  03FE                     l166:	
  1644                           ;spi.c: 31:     while ( !SSPSTATbits.BF );
  1645                           
  1646  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  1647  03FF  1303               	bcf	3,6	;RP1=0, select bank1
  1648  0400  1C14               	btfss	20,0	;volatile
  1649  0401  2C03               	goto	u911
  1650  0402  2C04               	goto	u910
  1651  0403                     u911:
  1652  0403  2BFE               	goto	l166
  1653  0404                     u910:
  1654  0404                     l169:
  1655  0404  0008               	return
  1656  0405                     __end_of_spiReceiveWait:
  1657                           
  1658                           	psect	text8
  1659  0438                     __ptext8:	
  1660 ;; *************** function _spiInit *****************
  1661 ;; Defined at:
  1662 ;;		line 12 in file "spi.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  sType           1    wreg     enum E1264
  1665 ;;  sDataSample     1    0[COMMON] enum E1272
  1666 ;;  sClockIdle      1    1[COMMON] enum E1276
  1667 ;;  sTransmitEdg    1    2[COMMON] enum E1280
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  sType           1    3[COMMON] enum E1264
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1679 ;;      Params:         3       0       0       0       0
  1680 ;;      Locals:         1       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0
  1682 ;;      Totals:         4       0       0       0       0
  1683 ;;Total ram usage:        4 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _spiInit
  1694  0438                     _spiInit:
  1695                           
  1696                           ;incstack = 0
  1697                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1698                           ;spiInit@sType stored from wreg
  1699  0438  00F3               	movwf	spiInit@sType
  1700  0439                     l1258:
  1701                           
  1702                           ;spi.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 13: {;spi.c: 14:     TRISC5 = 0;
  1703  0439  1683               	bsf	3,5	;RP0=1, select bank1
  1704  043A  1303               	bcf	3,6	;RP1=0, select bank1
  1705  043B  1287               	bcf	7,5	;volatile
  1706                           
  1707                           ;spi.c: 15:     if(sType & 0b00000100)
  1708  043C  1D73               	btfss	spiInit@sType,2
  1709  043D  2C3F               	goto	u1201
  1710  043E  2C40               	goto	u1200
  1711  043F                     u1201:
  1712  043F  2C44               	goto	l1264
  1713  0440                     u1200:
  1714  0440                     l1260:
  1715                           
  1716                           ;spi.c: 16:     {;spi.c: 17:         SSPSTAT = sTransmitEdge;
  1717  0440  0872               	movf	spiInit@sTransmitEdge,w
  1718  0441  0094               	movwf	20	;volatile
  1719  0442                     l1262:
  1720                           
  1721                           ;spi.c: 18:         TRISC3 = 1;
  1722  0442  1587               	bsf	7,3	;volatile
  1723                           
  1724                           ;spi.c: 19:     }
  1725  0443  2C48               	goto	l162
  1726  0444                     l1264:
  1727                           
  1728                           ;spi.c: 21:     {;spi.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  1729  0444  0870               	movf	spiInit@sDataSample,w
  1730  0445  0472               	iorwf	spiInit@sTransmitEdge,w
  1731  0446  0094               	movwf	20	;volatile
  1732  0447                     l1266:
  1733                           
  1734                           ;spi.c: 23:         TRISC3 = 0;
  1735  0447  1187               	bcf	7,3	;volatile
  1736  0448                     l162:	
  1737                           ;spi.c: 24:     }
  1738                           
  1739                           
  1740                           ;spi.c: 26:     SSPCON = sType | sClockIdle;
  1741  0448  0873               	movf	spiInit@sType,w
  1742  0449  0471               	iorwf	spiInit@sClockIdle,w
  1743  044A  1283               	bcf	3,5	;RP0=0, select bank0
  1744  044B  1303               	bcf	3,6	;RP1=0, select bank0
  1745  044C  0094               	movwf	20	;volatile
  1746  044D                     l163:
  1747  044D  0008               	return
  1748  044E                     __end_of_spiInit:
  1749                           
  1750                           	psect	text9
  1751  0703                     __ptext9:	
  1752 ;; *************** function _UARTInit *****************
  1753 ;; Defined at:
  1754 ;;		line 8 in file "UART.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  baud_rate       4    0[BANK0 ] const unsigned long 
  1757 ;;  BRGH            1    4[BANK0 ] const unsigned char 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, status,0, pclath, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         0       5       0       0       0
  1770 ;;      Locals:         0       0       0       0       0
  1771 ;;      Temps:          0       4       0       0       0
  1772 ;;      Totals:         0       9       0       0       0
  1773 ;;Total ram usage:        9 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    1
  1776 ;; This function calls:
  1777 ;;		___lldiv
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           
  1784                           ;psect for function _UARTInit
  1785  0703                     _UARTInit:
  1786  0703                     l1278:	
  1787                           ;incstack = 0
  1788                           ; Regs used in _UARTInit: [wreg+status,2+status,0+pclath+cstack]
  1789                           
  1790                           
  1791                           ;UART.c: 10:     if (BRGH == 0) {
  1792  0703  1283               	bcf	3,5	;RP0=0, select bank0
  1793  0704  1303               	bcf	3,6	;RP1=0, select bank0
  1794  0705  0824               	movf	UARTInit@BRGH,w
  1795  0706  1D03               	btfss	3,2
  1796  0707  2F09               	goto	u1211
  1797  0708  2F0A               	goto	u1210
  1798  0709                     u1211:
  1799  0709  2F37               	goto	l1284
  1800  070A                     u1210:
  1801  070A                     l1280:
  1802                           
  1803                           ;UART.c: 11:         SPBRG = 4000000/(64*baud_rate) - 1;
  1804  070A  0820               	movf	UARTInit@baud_rate,w
  1805  070B  00A5               	movwf	??_UARTInit
  1806  070C  0821               	movf	UARTInit@baud_rate+1,w
  1807  070D  00A6               	movwf	??_UARTInit+1
  1808  070E  0822               	movf	UARTInit@baud_rate+2,w
  1809  070F  00A7               	movwf	??_UARTInit+2
  1810  0710  0823               	movf	UARTInit@baud_rate+3,w
  1811  0711  00A8               	movwf	??_UARTInit+3
  1812  0712  3006               	movlw	6
  1813  0713                     u1225:
  1814  0713  1003               	clrc
  1815  0714  0DA5               	rlf	??_UARTInit,f
  1816  0715  0DA6               	rlf	??_UARTInit+1,f
  1817  0716  0DA7               	rlf	??_UARTInit+2,f
  1818  0717  0DA8               	rlf	??_UARTInit+3,f
  1819  0718                     u1220:
  1820  0718  3EFF               	addlw	-1
  1821  0719  1D03               	skipz
  1822  071A  2F13               	goto	u1225
  1823  071B  0828               	movf	??_UARTInit+3,w
  1824  071C  00F3               	movwf	___lldiv@divisor+3
  1825  071D  0827               	movf	??_UARTInit+2,w
  1826  071E  00F2               	movwf	___lldiv@divisor+2
  1827  071F  0826               	movf	??_UARTInit+1,w
  1828  0720  00F1               	movwf	___lldiv@divisor+1
  1829  0721  0825               	movf	??_UARTInit,w
  1830  0722  00F0               	movwf	___lldiv@divisor
  1831  0723  3000               	movlw	0
  1832  0724  00F7               	movwf	___lldiv@dividend+3
  1833  0725  303D               	movlw	61
  1834  0726  00F6               	movwf	___lldiv@dividend+2
  1835  0727  3009               	movlw	9
  1836  0728  00F5               	movwf	___lldiv@dividend+1
  1837  0729  3000               	movlw	0
  1838  072A  00F4               	movwf	___lldiv@dividend
  1839  072B  120A  118A  25C9  120A  118A  	fcall	___lldiv
  1840  0730  0870               	movf	?___lldiv,w
  1841  0731  3EFF               	addlw	255
  1842  0732  1683               	bsf	3,5	;RP0=1, select bank1
  1843  0733  1303               	bcf	3,6	;RP1=0, select bank1
  1844  0734  0099               	movwf	25	;volatile
  1845  0735                     l1282:
  1846                           
  1847                           ;UART.c: 12:         TXSTAbits.BRGH = 0;
  1848  0735  1118               	bcf	24,2	;volatile
  1849                           
  1850                           ;UART.c: 13:     } else {
  1851  0736  2F63               	goto	l1288
  1852  0737                     l1284:
  1853                           
  1854                           ;UART.c: 14:         SPBRG = 4000000/(16*baud_rate) - 1;
  1855  0737  0820               	movf	UARTInit@baud_rate,w
  1856  0738  00A5               	movwf	??_UARTInit
  1857  0739  0821               	movf	UARTInit@baud_rate+1,w
  1858  073A  00A6               	movwf	??_UARTInit+1
  1859  073B  0822               	movf	UARTInit@baud_rate+2,w
  1860  073C  00A7               	movwf	??_UARTInit+2
  1861  073D  0823               	movf	UARTInit@baud_rate+3,w
  1862  073E  00A8               	movwf	??_UARTInit+3
  1863  073F  3004               	movlw	4
  1864  0740                     u1235:
  1865  0740  1003               	clrc
  1866  0741  0DA5               	rlf	??_UARTInit,f
  1867  0742  0DA6               	rlf	??_UARTInit+1,f
  1868  0743  0DA7               	rlf	??_UARTInit+2,f
  1869  0744  0DA8               	rlf	??_UARTInit+3,f
  1870  0745                     u1230:
  1871  0745  3EFF               	addlw	-1
  1872  0746  1D03               	skipz
  1873  0747  2F40               	goto	u1235
  1874  0748  0828               	movf	??_UARTInit+3,w
  1875  0749  00F3               	movwf	___lldiv@divisor+3
  1876  074A  0827               	movf	??_UARTInit+2,w
  1877  074B  00F2               	movwf	___lldiv@divisor+2
  1878  074C  0826               	movf	??_UARTInit+1,w
  1879  074D  00F1               	movwf	___lldiv@divisor+1
  1880  074E  0825               	movf	??_UARTInit,w
  1881  074F  00F0               	movwf	___lldiv@divisor
  1882  0750  3000               	movlw	0
  1883  0751  00F7               	movwf	___lldiv@dividend+3
  1884  0752  303D               	movlw	61
  1885  0753  00F6               	movwf	___lldiv@dividend+2
  1886  0754  3009               	movlw	9
  1887  0755  00F5               	movwf	___lldiv@dividend+1
  1888  0756  3000               	movlw	0
  1889  0757  00F4               	movwf	___lldiv@dividend
  1890  0758  120A  118A  25C9  120A  118A  	fcall	___lldiv
  1891  075D  0870               	movf	?___lldiv,w
  1892  075E  3EFF               	addlw	255
  1893  075F  1683               	bsf	3,5	;RP0=1, select bank1
  1894  0760  1303               	bcf	3,6	;RP1=0, select bank1
  1895  0761  0099               	movwf	25	;volatile
  1896  0762                     l1286:
  1897                           
  1898                           ;UART.c: 15:         TXSTAbits.BRGH = 1;
  1899  0762  1518               	bsf	24,2	;volatile
  1900  0763                     l1288:
  1901                           
  1902                           ;UART.c: 19:     TXSTAbits.TX9 = 0;
  1903  0763  1318               	bcf	24,6	;volatile
  1904  0764                     l1290:
  1905                           
  1906                           ;UART.c: 20:     TXSTAbits.TXEN = 1;
  1907  0764  1698               	bsf	24,5	;volatile
  1908  0765                     l1292:
  1909                           
  1910                           ;UART.c: 21:     TXSTAbits.SYNC = 0;
  1911  0765  1218               	bcf	24,4	;volatile
  1912  0766                     l1294:
  1913                           
  1914                           ;UART.c: 24:     RCSTAbits.SPEN = 1;
  1915  0766  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0767  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0768  1798               	bsf	24,7	;volatile
  1918  0769                     l1296:
  1919                           
  1920                           ;UART.c: 25:     RCSTAbits.RX9 = 0;
  1921  0769  1318               	bcf	24,6	;volatile
  1922  076A                     l1298:
  1923                           
  1924                           ;UART.c: 26:     RCSTAbits.CREN = 1;
  1925  076A  1618               	bsf	24,4	;volatile
  1926  076B                     l1300:
  1927                           
  1928                           ;UART.c: 27:     RCSTAbits.FERR = 0;
  1929  076B  1118               	bcf	24,2	;volatile
  1930  076C                     l1302:
  1931                           
  1932                           ;UART.c: 28:     RCSTAbits.OERR = 0;
  1933  076C  1098               	bcf	24,1	;volatile
  1934  076D                     l1304:
  1935                           
  1936                           ;UART.c: 31:     TRISCbits.TRISC7 = 1;
  1937  076D  1683               	bsf	3,5	;RP0=1, select bank1
  1938  076E  1303               	bcf	3,6	;RP1=0, select bank1
  1939  076F  1787               	bsf	7,7	;volatile
  1940  0770                     l1306:
  1941                           
  1942                           ;UART.c: 32:     TRISCbits.TRISC6 = 0;
  1943  0770  1307               	bcf	7,6	;volatile
  1944  0771                     l58:
  1945  0771  0008               	return
  1946  0772                     __end_of_UARTInit:
  1947                           
  1948                           	psect	text10
  1949  05C9                     __ptext10:	
  1950 ;; *************** function ___lldiv *****************
  1951 ;; Defined at:
  1952 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\__lldiv.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  divisor         4    0[COMMON] unsigned long 
  1955 ;;  dividend        4    4[COMMON] unsigned long 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  quotient        4    9[COMMON] unsigned long 
  1958 ;;  counter         1   13[COMMON] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  4    0[COMMON] unsigned long 
  1961 ;; Registers used:
  1962 ;;		wreg, status,2, status,0
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1968 ;;      Params:         8       0       0       0       0
  1969 ;;      Locals:         5       0       0       0       0
  1970 ;;      Temps:          1       0       0       0       0
  1971 ;;      Totals:        14       0       0       0       0
  1972 ;;Total ram usage:       14 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_UARTInit
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function ___lldiv
  1983  05C9                     ___lldiv:
  1984  05C9                     l1152:	
  1985                           ;incstack = 0
  1986                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1987                           
  1988  05C9  3000               	movlw	0
  1989  05CA  00FC               	movwf	___lldiv@quotient+3
  1990  05CB  3000               	movlw	0
  1991  05CC  00FB               	movwf	___lldiv@quotient+2
  1992  05CD  3000               	movlw	0
  1993  05CE  00FA               	movwf	___lldiv@quotient+1
  1994  05CF  3000               	movlw	0
  1995  05D0  00F9               	movwf	___lldiv@quotient
  1996  05D1  0873               	movf	___lldiv@divisor+3,w
  1997  05D2  0472               	iorwf	___lldiv@divisor+2,w
  1998  05D3  0471               	iorwf	___lldiv@divisor+1,w
  1999  05D4  0470               	iorwf	___lldiv@divisor,w
  2000  05D5  1903               	skipnz
  2001  05D6  2DD8               	goto	u941
  2002  05D7  2DD9               	goto	u940
  2003  05D8                     u941:
  2004  05D8  2E26               	goto	l1172
  2005  05D9                     u940:
  2006  05D9                     l1154:
  2007  05D9  01FD               	clrf	___lldiv@counter
  2008  05DA  0AFD               	incf	___lldiv@counter,f
  2009  05DB  2DE9               	goto	l1158
  2010  05DC                     l1156:
  2011  05DC  3001               	movlw	1
  2012  05DD  00F8               	movwf	??___lldiv
  2013  05DE                     u955:
  2014  05DE  1003               	clrc
  2015  05DF  0DF0               	rlf	___lldiv@divisor,f
  2016  05E0  0DF1               	rlf	___lldiv@divisor+1,f
  2017  05E1  0DF2               	rlf	___lldiv@divisor+2,f
  2018  05E2  0DF3               	rlf	___lldiv@divisor+3,f
  2019  05E3  0BF8               	decfsz	??___lldiv,f
  2020  05E4  2DDE               	goto	u955
  2021  05E5  3001               	movlw	1
  2022  05E6  00F8               	movwf	??___lldiv
  2023  05E7  0878               	movf	??___lldiv,w
  2024  05E8  07FD               	addwf	___lldiv@counter,f
  2025  05E9                     l1158:
  2026  05E9  1FF3               	btfss	___lldiv@divisor+3,7
  2027  05EA  2DEC               	goto	u961
  2028  05EB  2DED               	goto	u960
  2029  05EC                     u961:
  2030  05EC  2DDC               	goto	l1156
  2031  05ED                     u960:
  2032  05ED                     l1160:
  2033  05ED  3001               	movlw	1
  2034  05EE  00F8               	movwf	??___lldiv
  2035  05EF                     u975:
  2036  05EF  1003               	clrc
  2037  05F0  0DF9               	rlf	___lldiv@quotient,f
  2038  05F1  0DFA               	rlf	___lldiv@quotient+1,f
  2039  05F2  0DFB               	rlf	___lldiv@quotient+2,f
  2040  05F3  0DFC               	rlf	___lldiv@quotient+3,f
  2041  05F4  0BF8               	decfsz	??___lldiv,f
  2042  05F5  2DEF               	goto	u975
  2043  05F6                     l1162:
  2044  05F6  0873               	movf	___lldiv@divisor+3,w
  2045  05F7  0277               	subwf	___lldiv@dividend+3,w
  2046  05F8  1D03               	skipz
  2047  05F9  2E04               	goto	u985
  2048  05FA  0872               	movf	___lldiv@divisor+2,w
  2049  05FB  0276               	subwf	___lldiv@dividend+2,w
  2050  05FC  1D03               	skipz
  2051  05FD  2E04               	goto	u985
  2052  05FE  0871               	movf	___lldiv@divisor+1,w
  2053  05FF  0275               	subwf	___lldiv@dividend+1,w
  2054  0600  1D03               	skipz
  2055  0601  2E04               	goto	u985
  2056  0602  0870               	movf	___lldiv@divisor,w
  2057  0603  0274               	subwf	___lldiv@dividend,w
  2058  0604                     u985:
  2059  0604  1C03               	skipc
  2060  0605  2E07               	goto	u981
  2061  0606  2E08               	goto	u980
  2062  0607                     u981:
  2063  0607  2E17               	goto	l1168
  2064  0608                     u980:
  2065  0608                     l1164:
  2066  0608  0870               	movf	___lldiv@divisor,w
  2067  0609  02F4               	subwf	___lldiv@dividend,f
  2068  060A  0871               	movf	___lldiv@divisor+1,w
  2069  060B  1C03               	skipc
  2070  060C  0F71               	incfsz	___lldiv@divisor+1,w
  2071  060D  02F5               	subwf	___lldiv@dividend+1,f
  2072  060E  0872               	movf	___lldiv@divisor+2,w
  2073  060F  1C03               	skipc
  2074  0610  0F72               	incfsz	___lldiv@divisor+2,w
  2075  0611  02F6               	subwf	___lldiv@dividend+2,f
  2076  0612  0873               	movf	___lldiv@divisor+3,w
  2077  0613  1C03               	skipc
  2078  0614  0F73               	incfsz	___lldiv@divisor+3,w
  2079  0615  02F7               	subwf	___lldiv@dividend+3,f
  2080  0616                     l1166:
  2081  0616  1479               	bsf	___lldiv@quotient,0
  2082  0617                     l1168:
  2083  0617  3001               	movlw	1
  2084  0618                     u995:
  2085  0618  1003               	clrc
  2086  0619  0CF3               	rrf	___lldiv@divisor+3,f
  2087  061A  0CF2               	rrf	___lldiv@divisor+2,f
  2088  061B  0CF1               	rrf	___lldiv@divisor+1,f
  2089  061C  0CF0               	rrf	___lldiv@divisor,f
  2090  061D  3EFF               	addlw	-1
  2091  061E  1D03               	skipz
  2092  061F  2E18               	goto	u995
  2093  0620                     l1170:
  2094  0620  3001               	movlw	1
  2095  0621  02FD               	subwf	___lldiv@counter,f
  2096  0622  1D03               	btfss	3,2
  2097  0623  2E25               	goto	u1001
  2098  0624  2E26               	goto	u1000
  2099  0625                     u1001:
  2100  0625  2DED               	goto	l1160
  2101  0626                     u1000:
  2102  0626                     l1172:
  2103  0626  087C               	movf	___lldiv@quotient+3,w
  2104  0627  00F3               	movwf	?___lldiv+3
  2105  0628  087B               	movf	___lldiv@quotient+2,w
  2106  0629  00F2               	movwf	?___lldiv+2
  2107  062A  087A               	movf	___lldiv@quotient+1,w
  2108  062B  00F1               	movwf	?___lldiv+1
  2109  062C  0879               	movf	___lldiv@quotient,w
  2110  062D  00F0               	movwf	?___lldiv
  2111  062E                     l302:
  2112  062E  0008               	return
  2113  062F                     __end_of___lldiv:
  2114                           
  2115                           	psect	text11
  2116  048B                     __ptext11:	
  2117 ;; *************** function _LcdWriteString *****************
  2118 ;; Defined at:
  2119 ;;		line 64 in file "LCD8btis.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;  value           2    4[COMMON] PTR const unsigned char 
  2122 ;;		 -> uint8ToChar@salida(4), STR_1(17), 
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;  i               2    9[COMMON] int 
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      void 
  2127 ;; Registers used:
  2128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2134 ;;      Params:         2       0       0       0       0
  2135 ;;      Locals:         2       0       0       0       0
  2136 ;;      Temps:          3       0       0       0       0
  2137 ;;      Totals:         7       0       0       0       0
  2138 ;;Total ram usage:        7 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:    2
  2141 ;; This function calls:
  2142 ;;		_LcdWriteChar
  2143 ;; This function is called by:
  2144 ;;		_main
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           
  2149                           ;psect for function _LcdWriteString
  2150  048B                     _LcdWriteString:
  2151  048B                     l1322:	
  2152                           ;incstack = 0
  2153                           ; Regs used in _LcdWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2154                           
  2155                           
  2156                           ;LCD8btis.c: 66:     for (int i = 0; value[i] != '\0'; i++)
  2157  048B  01F9               	clrf	LcdWriteString@i
  2158  048C  01FA               	clrf	LcdWriteString@i+1
  2159  048D  2CB0               	goto	l1328
  2160  048E                     l1324:
  2161                           
  2162                           ;LCD8btis.c: 67:         LcdWriteChar(value[i]);
  2163  048E  0879               	movf	LcdWriteString@i,w
  2164  048F  0774               	addwf	LcdWriteString@value,w
  2165  0490  00F7               	movwf	??_LcdWriteString+1
  2166  0491  0875               	movf	LcdWriteString@value+1,w
  2167  0492  00F6               	movwf	??_LcdWriteString
  2168  0493  1803               	skipnc
  2169  0494  0AF6               	incf	??_LcdWriteString,f
  2170  0495  1FF9               	btfss	LcdWriteString@i,7
  2171  0496  2C98               	goto	u1240
  2172  0497  03F6               	decf	??_LcdWriteString,f
  2173  0498                     u1240:
  2174  0498  0876               	movf	??_LcdWriteString,w
  2175  0499  00F8               	movwf	??_LcdWriteString+2
  2176  049A  0878               	movf	??_LcdWriteString+2,w
  2177  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2178  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2179  049D  00FF               	movwf	btemp+1
  2180  049E  0877               	movf	??_LcdWriteString+1,w
  2181  049F  0084               	movwf	4
  2182  04A0  120A  118A  2003  120A  118A  	fcall	stringtab
  2183  04A5  120A  118A  240E  120A  118A  	fcall	_LcdWriteChar
  2184  04AA                     l1326:
  2185  04AA  3001               	movlw	1
  2186  04AB  07F9               	addwf	LcdWriteString@i,f
  2187  04AC  1803               	skipnc
  2188  04AD  0AFA               	incf	LcdWriteString@i+1,f
  2189  04AE  3000               	movlw	0
  2190  04AF  07FA               	addwf	LcdWriteString@i+1,f
  2191  04B0                     l1328:
  2192  04B0  0879               	movf	LcdWriteString@i,w
  2193  04B1  0774               	addwf	LcdWriteString@value,w
  2194  04B2  00F7               	movwf	??_LcdWriteString+1
  2195  04B3  0875               	movf	LcdWriteString@value+1,w
  2196  04B4  00F6               	movwf	??_LcdWriteString
  2197  04B5  1803               	skipnc
  2198  04B6  0AF6               	incf	??_LcdWriteString,f
  2199  04B7  1FF9               	btfss	LcdWriteString@i,7
  2200  04B8  2CBA               	goto	u1250
  2201  04B9  03F6               	decf	??_LcdWriteString,f
  2202  04BA                     u1250:
  2203  04BA  0876               	movf	??_LcdWriteString,w
  2204  04BB  00F8               	movwf	??_LcdWriteString+2
  2205  04BC  0878               	movf	??_LcdWriteString+2,w
  2206  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  2207  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  2208  04BF  00FF               	movwf	btemp+1
  2209  04C0  0877               	movf	??_LcdWriteString+1,w
  2210  04C1  0084               	movwf	4
  2211  04C2  120A  118A  2003  120A  118A  	fcall	stringtab
  2212  04C7  3A00               	xorlw	0
  2213  04C8  1D03               	skipz
  2214  04C9  2CCB               	goto	u1261
  2215  04CA  2CCC               	goto	u1260
  2216  04CB                     u1261:
  2217  04CB  2C8E               	goto	l1324
  2218  04CC                     u1260:
  2219  04CC                     l140:
  2220  04CC  0008               	return
  2221  04CD                     __end_of_LcdWriteString:
  2222                           
  2223                           	psect	text12
  2224  040E                     __ptext12:	
  2225 ;; *************** function _LcdWriteChar *****************
  2226 ;; Defined at:
  2227 ;;		line 56 in file "LCD8btis.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  value           1    wreg     unsigned char 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  value           1    3[COMMON] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2, status,0, pclath, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2241 ;;      Params:         0       0       0       0       0
  2242 ;;      Locals:         1       0       0       0       0
  2243 ;;      Temps:          1       0       0       0       0
  2244 ;;      Totals:         2       0       0       0       0
  2245 ;;Total ram usage:        2 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    1
  2248 ;; This function calls:
  2249 ;;		_LcdPort
  2250 ;; This function is called by:
  2251 ;;		_LcdWriteString
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           
  2256                           ;psect for function _LcdWriteChar
  2257  040E                     _LcdWriteChar:
  2258                           
  2259                           ;incstack = 0
  2260                           ; Regs used in _LcdWriteChar: [wreg+status,2+status,0+pclath+cstack]
  2261                           ;LcdWriteChar@value stored from wreg
  2262  040E  00F3               	movwf	LcdWriteChar@value
  2263  040F                     l1126:
  2264                           
  2265                           ;LCD8btis.c: 57:     RE1 = 1;
  2266  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2267  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2268  0411  1489               	bsf	9,1	;volatile
  2269  0412                     l1128:
  2270                           
  2271                           ;LCD8btis.c: 58:     LcdPort(value);
  2272  0412  0873               	movf	LcdWriteChar@value,w
  2273  0413  120A  118A  2772  120A  118A  	fcall	_LcdPort
  2274  0418                     l1130:
  2275                           
  2276                           ;LCD8btis.c: 59:     RE0 = 1;
  2277  0418  1283               	bcf	3,5	;RP0=0, select bank0
  2278  0419  1303               	bcf	3,6	;RP1=0, select bank0
  2279  041A  1409               	bsf	9,0	;volatile
  2280  041B                     l1132:
  2281                           
  2282                           ;LCD8btis.c: 60:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2283  041B  300D               	movlw	13
  2284  041C  00F2               	movwf	??_LcdWriteChar
  2285  041D                     u1277:
  2286  041D  0BF2               	decfsz	??_LcdWriteChar,f
  2287  041E  2C1D               	goto	u1277
  2288  041F                     l1134:
  2289                           
  2290                           ;LCD8btis.c: 61:     RE0 = 0;
  2291  041F  1283               	bcf	3,5	;RP0=0, select bank0
  2292  0420  1303               	bcf	3,6	;RP1=0, select bank0
  2293  0421  1009               	bcf	9,0	;volatile
  2294  0422                     l134:
  2295  0422  0008               	return
  2296  0423                     __end_of_LcdWriteChar:
  2297                           
  2298                           	psect	text13
  2299  0468                     __ptext13:	
  2300 ;; *************** function _LcdSetCursor *****************
  2301 ;; Defined at:
  2302 ;;		line 29 in file "LCD8btis.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  row             1    wreg     unsigned char 
  2305 ;;  column          1    5[COMMON] unsigned char 
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;  row             1    8[COMMON] unsigned char 
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2317 ;;      Params:         1       0       0       0       0
  2318 ;;      Locals:         1       0       0       0       0
  2319 ;;      Temps:          2       0       0       0       0
  2320 ;;      Totals:         4       0       0       0       0
  2321 ;;Total ram usage:        4 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    2
  2324 ;; This function calls:
  2325 ;;		_LcdCmd
  2326 ;; This function is called by:
  2327 ;;		_main
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           
  2332                           ;psect for function _LcdSetCursor
  2333  0468                     _LcdSetCursor:
  2334                           
  2335                           ;incstack = 0
  2336                           ; Regs used in _LcdSetCursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2337                           ;LcdSetCursor@row stored from wreg
  2338  0468  00F8               	movwf	LcdSetCursor@row
  2339  0469                     l1308:
  2340                           
  2341                           ;LCD8btis.c: 30:     switch(row){
  2342  0469  2C7A               	goto	l1316
  2343  046A                     l1310:
  2344                           
  2345                           ;LCD8btis.c: 32:             LcdCmd(0x80 + column - 1);
  2346  046A  0875               	movf	LcdSetCursor@column,w
  2347  046B  3E7F               	addlw	127
  2348  046C  120A  118A  244E  120A  118A  	fcall	_LcdCmd
  2349                           
  2350                           ;LCD8btis.c: 33:             break;
  2351  0471  2C8A               	goto	l128
  2352  0472                     l1312:
  2353                           
  2354                           ;LCD8btis.c: 35:             LcdCmd(0xC0 + column - 1);
  2355  0472  0875               	movf	LcdSetCursor@column,w
  2356  0473  3EBF               	addlw	191
  2357  0474  120A  118A  244E  120A  118A  	fcall	_LcdCmd
  2358                           
  2359                           ;LCD8btis.c: 36:             break;
  2360  0479  2C8A               	goto	l128
  2361  047A                     l1316:
  2362  047A  0878               	movf	LcdSetCursor@row,w
  2363  047B  00F6               	movwf	??_LcdSetCursor
  2364  047C  01F7               	clrf	??_LcdSetCursor+1
  2365                           
  2366                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2367                           ; Switch size 1, requested type "simple"
  2368                           ; Number of cases is 1, Range of values is 0 to 0
  2369                           ; switch strategies available:
  2370                           ; Name         Instructions Cycles
  2371                           ; simple_byte            4     3 (average)
  2372                           ; direct_byte           11     8 (fixed)
  2373                           ; jumptable            260     6 (fixed)
  2374                           ;	Chosen strategy is simple_byte
  2375  047D  0877               	movf	??_LcdSetCursor+1,w
  2376  047E  3A00               	xorlw	0	; case 0
  2377  047F  1903               	skipnz
  2378  0480  2C82               	goto	l1404
  2379  0481  2C8A               	goto	l128
  2380  0482                     l1404:
  2381                           
  2382                           ; Switch size 1, requested type "simple"
  2383                           ; Number of cases is 2, Range of values is 1 to 2
  2384                           ; switch strategies available:
  2385                           ; Name         Instructions Cycles
  2386                           ; simple_byte            7     4 (average)
  2387                           ; direct_byte           17    11 (fixed)
  2388                           ; jumptable            263     9 (fixed)
  2389                           ;	Chosen strategy is simple_byte
  2390  0482  0876               	movf	??_LcdSetCursor,w
  2391  0483  3A01               	xorlw	1	; case 1
  2392  0484  1903               	skipnz
  2393  0485  2C6A               	goto	l1310
  2394  0486  3A03               	xorlw	3	; case 2
  2395  0487  1903               	skipnz
  2396  0488  2C72               	goto	l1312
  2397  0489  2C8A               	goto	l128
  2398  048A                     l128:
  2399  048A  0008               	return
  2400  048B                     __end_of_LcdSetCursor:
  2401                           
  2402                           	psect	text14
  2403  04CD                     __ptext14:	
  2404 ;; *************** function _LcdInit *****************
  2405 ;; Defined at:
  2406 ;;		line 41 in file "LCD8btis.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;		None
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0, pclath, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2420 ;;      Params:         0       0       0       0       0
  2421 ;;      Locals:         0       0       0       0       0
  2422 ;;      Temps:          2       0       0       0       0
  2423 ;;      Totals:         2       0       0       0       0
  2424 ;;Total ram usage:        2 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    2
  2427 ;; This function calls:
  2428 ;;		_LcdCmd
  2429 ;;		_LcdPort
  2430 ;; This function is called by:
  2431 ;;		_main
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           
  2436                           ;psect for function _LcdInit
  2437  04CD                     _LcdInit:
  2438  04CD                     l1268:	
  2439                           ;incstack = 0
  2440                           ; Regs used in _LcdInit: [wreg+status,2+status,0+pclath+cstack]
  2441                           
  2442                           
  2443                           ;LCD8btis.c: 42:     LcdPort(0x00);
  2444  04CD  3000               	movlw	0
  2445  04CE  120A  118A  2772  120A  118A  	fcall	_LcdPort
  2446  04D3                     l1270:
  2447                           
  2448                           ;LCD8btis.c: 43:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2449  04D3  301A               	movlw	26
  2450  04D4  00F6               	movwf	??_LcdInit+1
  2451  04D5  30F8               	movlw	248
  2452  04D6  00F5               	movwf	??_LcdInit
  2453  04D7                     u1287:
  2454  04D7  0BF5               	decfsz	??_LcdInit,f
  2455  04D8  2CD7               	goto	u1287
  2456  04D9  0BF6               	decfsz	??_LcdInit+1,f
  2457  04DA  2CD7               	goto	u1287
  2458  04DB  0000               	nop
  2459  04DC                     l1272:
  2460                           
  2461                           ;LCD8btis.c: 44:     LcdCmd(0x30);
  2462  04DC  3030               	movlw	48
  2463  04DD  120A  118A  244E  120A  118A  	fcall	_LcdCmd
  2464                           
  2465                           ;LCD8btis.c: 45:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2466  04E2  3007               	movlw	7
  2467  04E3  00F6               	movwf	??_LcdInit+1
  2468  04E4  307D               	movlw	125
  2469  04E5  00F5               	movwf	??_LcdInit
  2470  04E6                     u1297:
  2471  04E6  0BF5               	decfsz	??_LcdInit,f
  2472  04E7  2CE6               	goto	u1297
  2473  04E8  0BF6               	decfsz	??_LcdInit+1,f
  2474  04E9  2CE6               	goto	u1297
  2475  04EA                     l1274:
  2476                           
  2477                           ;LCD8btis.c: 46:     LcdCmd(0x30);
  2478  04EA  3030               	movlw	48
  2479  04EB  120A  118A  244E  120A  118A  	fcall	_LcdCmd
  2480  04F0                     l1276:
  2481                           
  2482                           ;LCD8btis.c: 47:     _delay((unsigned long)((11)*(4000000/4000.0)));
  2483  04F0  300F               	movlw	15
  2484  04F1  00F6               	movwf	??_LcdInit+1
  2485  04F2  3047               	movlw	71
  2486  04F3  00F5               	movwf	??_LcdInit
  2487  04F4                     u1307:
  2488  04F4  0BF5               	decfsz	??_LcdInit,f
  2489  04F5  2CF4               	goto	u1307
  2490  04F6  0BF6               	decfsz	??_LcdInit+1,f
  2491  04F7  2CF4               	goto	u1307
  2492  04F8  2CF9               	nop2
  2493                           
  2494                           ;LCD8btis.c: 48:     LcdCmd(0x30);
  2495  04F9  3030               	movlw	48
  2496  04FA  120A  118A  244E  120A  118A  	fcall	_LcdCmd
  2497                           
  2498                           ;LCD8btis.c: 50:     LcdCmd(0x38);
  2499  04FF  3038               	movlw	56
  2500  0500  120A  118A  244E  120A  118A  	fcall	_LcdCmd
  2501                           
  2502                           ;LCD8btis.c: 51:     LcdCmd(0x0C);
  2503  0505  300C               	movlw	12
  2504  0506  120A  118A  244E  120A  118A  	fcall	_LcdCmd
  2505                           
  2506                           ;LCD8btis.c: 52:     LcdCmd(0x6);
  2507  050B  3006               	movlw	6
  2508  050C  120A  118A  244E  120A  118A  	fcall	_LcdCmd
  2509  0511                     l131:
  2510  0511  0008               	return
  2511  0512                     __end_of_LcdInit:
  2512                           
  2513                           	psect	text15
  2514  044E                     __ptext15:	
  2515 ;; *************** function _LcdCmd *****************
  2516 ;; Defined at:
  2517 ;;		line 16 in file "LCD8btis.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  value           1    wreg     unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  value           1    4[COMMON] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, pclath, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2531 ;;      Params:         0       0       0       0       0
  2532 ;;      Locals:         1       0       0       0       0
  2533 ;;      Temps:          2       0       0       0       0
  2534 ;;      Totals:         3       0       0       0       0
  2535 ;;Total ram usage:        3 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    1
  2538 ;; This function calls:
  2539 ;;		_LcdPort
  2540 ;; This function is called by:
  2541 ;;		_LcdSetCursor
  2542 ;;		_LcdInit
  2543 ;;		_LcdClear
  2544 ;;		_LcdShiftRight
  2545 ;;		_LcdShiftLeft
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           
  2550                           ;psect for function _LcdCmd
  2551  044E                     _LcdCmd:
  2552                           
  2553                           ;incstack = 0
  2554                           ; Regs used in _LcdCmd: [wreg+status,2+status,0+pclath+cstack]
  2555                           ;LcdCmd@value stored from wreg
  2556  044E  00F4               	movwf	LcdCmd@value
  2557  044F                     l1116:
  2558                           
  2559                           ;LCD8btis.c: 17:     RE1 = 0;
  2560  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2561  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0451  1089               	bcf	9,1	;volatile
  2563  0452                     l1118:
  2564                           
  2565                           ;LCD8btis.c: 18:     LcdPort(value);
  2566  0452  0874               	movf	LcdCmd@value,w
  2567  0453  120A  118A  2772  120A  118A  	fcall	_LcdPort
  2568  0458                     l1120:
  2569                           
  2570                           ;LCD8btis.c: 19:     RE0 = 1;
  2571  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2573  045A  1409               	bsf	9,0	;volatile
  2574  045B                     l1122:
  2575                           
  2576                           ;LCD8btis.c: 20:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2577  045B  3006               	movlw	6
  2578  045C  00F3               	movwf	??_LcdCmd+1
  2579  045D  3030               	movlw	48
  2580  045E  00F2               	movwf	??_LcdCmd
  2581  045F                     u1317:
  2582  045F  0BF2               	decfsz	??_LcdCmd,f
  2583  0460  2C5F               	goto	u1317
  2584  0461  0BF3               	decfsz	??_LcdCmd+1,f
  2585  0462  2C5F               	goto	u1317
  2586  0463  0000               	nop
  2587  0464                     l1124:
  2588                           
  2589                           ;LCD8btis.c: 21:     RE0 = 0;
  2590  0464  1283               	bcf	3,5	;RP0=0, select bank0
  2591  0465  1303               	bcf	3,6	;RP1=0, select bank0
  2592  0466  1009               	bcf	9,0	;volatile
  2593  0467                     l118:
  2594  0467  0008               	return
  2595  0468                     __end_of_LcdCmd:
  2596                           
  2597                           	psect	text16
  2598  0772                     __ptext16:	
  2599 ;; *************** function _LcdPort *****************
  2600 ;; Defined at:
  2601 ;;		line 3 in file "LCD8btis.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  value           1    wreg     unsigned char 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  value           1    1[COMMON] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2615 ;;      Params:         0       0       0       0       0
  2616 ;;      Locals:         1       0       0       0       0
  2617 ;;      Temps:          1       0       0       0       0
  2618 ;;      Totals:         2       0       0       0       0
  2619 ;;Total ram usage:        2 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; This function calls:
  2622 ;;		Nothing
  2623 ;; This function is called by:
  2624 ;;		_LcdCmd
  2625 ;;		_LcdInit
  2626 ;;		_LcdWriteChar
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _LcdPort
  2632  0772                     _LcdPort:
  2633                           
  2634                           ;incstack = 0
  2635                           ; Regs used in _LcdPort: [wreg+status,2+status,0]
  2636                           ;LcdPort@value stored from wreg
  2637  0772  00F1               	movwf	LcdPort@value
  2638  0773                     l1112:
  2639                           
  2640                           ;LCD8btis.c: 6:     RD0 = value &1;
  2641  0773  1871               	btfsc	LcdPort@value,0
  2642  0774  2F76               	goto	u681
  2643  0775  2F7A               	goto	u680
  2644  0776                     u681:
  2645  0776  1283               	bcf	3,5	;RP0=0, select bank0
  2646  0777  1303               	bcf	3,6	;RP1=0, select bank0
  2647  0778  1408               	bsf	8,0	;volatile
  2648  0779  2F7D               	goto	u694
  2649  077A                     u680:
  2650  077A  1283               	bcf	3,5	;RP0=0, select bank0
  2651  077B  1303               	bcf	3,6	;RP1=0, select bank0
  2652  077C  1008               	bcf	8,0	;volatile
  2653  077D                     u694:
  2654  077D                     l1114:
  2655                           
  2656                           ;LCD8btis.c: 7:     RD1 = (value & 2) >> 1;
  2657  077D  0871               	movf	LcdPort@value,w
  2658  077E  00F0               	movwf	??_LcdPort
  2659  077F  3001               	movlw	1
  2660  0780                     u705:
  2661  0780  1003               	clrc
  2662  0781  0CF0               	rrf	??_LcdPort,f
  2663  0782  3EFF               	addlw	-1
  2664  0783  1D03               	skipz
  2665  0784  2F80               	goto	u705
  2666  0785  1870               	btfsc	??_LcdPort,0
  2667  0786  2F88               	goto	u711
  2668  0787  2F8C               	goto	u710
  2669  0788                     u711:
  2670  0788  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0789  1303               	bcf	3,6	;RP1=0, select bank0
  2672  078A  1488               	bsf	8,1	;volatile
  2673  078B  2F8F               	goto	u724
  2674  078C                     u710:
  2675  078C  1283               	bcf	3,5	;RP0=0, select bank0
  2676  078D  1303               	bcf	3,6	;RP1=0, select bank0
  2677  078E  1088               	bcf	8,1	;volatile
  2678  078F                     u724:
  2679                           
  2680                           ;LCD8btis.c: 8:     RD2 = (value & 4) >> 2;
  2681  078F  0871               	movf	LcdPort@value,w
  2682  0790  00F0               	movwf	??_LcdPort
  2683  0791  3002               	movlw	2
  2684  0792                     u735:
  2685  0792  1003               	clrc
  2686  0793  0CF0               	rrf	??_LcdPort,f
  2687  0794  3EFF               	addlw	-1
  2688  0795  1D03               	skipz
  2689  0796  2F92               	goto	u735
  2690  0797  1870               	btfsc	??_LcdPort,0
  2691  0798  2F9A               	goto	u741
  2692  0799  2F9E               	goto	u740
  2693  079A                     u741:
  2694  079A  1283               	bcf	3,5	;RP0=0, select bank0
  2695  079B  1303               	bcf	3,6	;RP1=0, select bank0
  2696  079C  1508               	bsf	8,2	;volatile
  2697  079D  2FA1               	goto	u754
  2698  079E                     u740:
  2699  079E  1283               	bcf	3,5	;RP0=0, select bank0
  2700  079F  1303               	bcf	3,6	;RP1=0, select bank0
  2701  07A0  1108               	bcf	8,2	;volatile
  2702  07A1                     u754:
  2703                           
  2704                           ;LCD8btis.c: 9:     RD3 = (value &8) >> 3;
  2705  07A1  0871               	movf	LcdPort@value,w
  2706  07A2  00F0               	movwf	??_LcdPort
  2707  07A3  3003               	movlw	3
  2708  07A4                     u765:
  2709  07A4  1003               	clrc
  2710  07A5  0CF0               	rrf	??_LcdPort,f
  2711  07A6  3EFF               	addlw	-1
  2712  07A7  1D03               	skipz
  2713  07A8  2FA4               	goto	u765
  2714  07A9  1870               	btfsc	??_LcdPort,0
  2715  07AA  2FAC               	goto	u771
  2716  07AB  2FB0               	goto	u770
  2717  07AC                     u771:
  2718  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  2719  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  2720  07AE  1588               	bsf	8,3	;volatile
  2721  07AF  2FB3               	goto	u784
  2722  07B0                     u770:
  2723  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  2724  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  2725  07B2  1188               	bcf	8,3	;volatile
  2726  07B3                     u784:
  2727                           
  2728                           ;LCD8btis.c: 10:     RD4 = (value & 16)>>4;
  2729  07B3  0871               	movf	LcdPort@value,w
  2730  07B4  00F0               	movwf	??_LcdPort
  2731  07B5  3004               	movlw	4
  2732  07B6                     u795:
  2733  07B6  1003               	clrc
  2734  07B7  0CF0               	rrf	??_LcdPort,f
  2735  07B8  3EFF               	addlw	-1
  2736  07B9  1D03               	skipz
  2737  07BA  2FB6               	goto	u795
  2738  07BB  1870               	btfsc	??_LcdPort,0
  2739  07BC  2FBE               	goto	u801
  2740  07BD  2FC2               	goto	u800
  2741  07BE                     u801:
  2742  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  2743  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  2744  07C0  1608               	bsf	8,4	;volatile
  2745  07C1  2FC5               	goto	u814
  2746  07C2                     u800:
  2747  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  2748  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  2749  07C4  1208               	bcf	8,4	;volatile
  2750  07C5                     u814:
  2751                           
  2752                           ;LCD8btis.c: 11:     RD5 = (value & 32) >> 5 ;
  2753  07C5  0871               	movf	LcdPort@value,w
  2754  07C6  00F0               	movwf	??_LcdPort
  2755  07C7  3005               	movlw	5
  2756  07C8                     u825:
  2757  07C8  1003               	clrc
  2758  07C9  0CF0               	rrf	??_LcdPort,f
  2759  07CA  3EFF               	addlw	-1
  2760  07CB  1D03               	skipz
  2761  07CC  2FC8               	goto	u825
  2762  07CD  1870               	btfsc	??_LcdPort,0
  2763  07CE  2FD0               	goto	u831
  2764  07CF  2FD4               	goto	u830
  2765  07D0                     u831:
  2766  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  2767  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  2768  07D2  1688               	bsf	8,5	;volatile
  2769  07D3  2FD7               	goto	u844
  2770  07D4                     u830:
  2771  07D4  1283               	bcf	3,5	;RP0=0, select bank0
  2772  07D5  1303               	bcf	3,6	;RP1=0, select bank0
  2773  07D6  1288               	bcf	8,5	;volatile
  2774  07D7                     u844:
  2775                           
  2776                           ;LCD8btis.c: 12:     RD6 = (value & 64) >> 6;
  2777  07D7  0871               	movf	LcdPort@value,w
  2778  07D8  00F0               	movwf	??_LcdPort
  2779  07D9  3006               	movlw	6
  2780  07DA                     u855:
  2781  07DA  1003               	clrc
  2782  07DB  0CF0               	rrf	??_LcdPort,f
  2783  07DC  3EFF               	addlw	-1
  2784  07DD  1D03               	skipz
  2785  07DE  2FDA               	goto	u855
  2786  07DF  1870               	btfsc	??_LcdPort,0
  2787  07E0  2FE2               	goto	u861
  2788  07E1  2FE6               	goto	u860
  2789  07E2                     u861:
  2790  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  2791  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  2792  07E4  1708               	bsf	8,6	;volatile
  2793  07E5  2FE9               	goto	u874
  2794  07E6                     u860:
  2795  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  2796  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  2797  07E8  1308               	bcf	8,6	;volatile
  2798  07E9                     u874:
  2799                           
  2800                           ;LCD8btis.c: 13:     RD7 = (value & 128) >> 7;
  2801  07E9  0871               	movf	LcdPort@value,w
  2802  07EA  00F0               	movwf	??_LcdPort
  2803  07EB  3007               	movlw	7
  2804  07EC                     u885:
  2805  07EC  1003               	clrc
  2806  07ED  0CF0               	rrf	??_LcdPort,f
  2807  07EE  3EFF               	addlw	-1
  2808  07EF  1D03               	skipz
  2809  07F0  2FEC               	goto	u885
  2810  07F1  1870               	btfsc	??_LcdPort,0
  2811  07F2  2FF4               	goto	u891
  2812  07F3  2FF8               	goto	u890
  2813  07F4                     u891:
  2814  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  2815  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  2816  07F6  1788               	bsf	8,7	;volatile
  2817  07F7  2FFB               	goto	u904
  2818  07F8                     u890:
  2819  07F8  1283               	bcf	3,5	;RP0=0, select bank0
  2820  07F9  1303               	bcf	3,6	;RP1=0, select bank0
  2821  07FA  1388               	bcf	8,7	;volatile
  2822  07FB                     u904:
  2823  07FB                     l115:
  2824  07FB  0008               	return
  2825  07FC                     __end_of_LcdPort:
  2826  007E                     btemp	set	126	;btemp
  2827  007E                     wtemp0	set	126
  2828                           
  2829                           	psect	config
  2830                           
  2831                           ;Config register CONFIG1 @ 0x2007
  2832                           ;	Oscillator Selection bits
  2833                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2834                           ;	Watchdog Timer Enable bit
  2835                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2836                           ;	Power-up Timer Enable bit
  2837                           ;	PWRTE = OFF, PWRT disabled
  2838                           ;	RE3/MCLR pin function select bit
  2839                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2840                           ;	Code Protection bit
  2841                           ;	CP = OFF, Program memory code protection is disabled
  2842                           ;	Data Code Protection bit
  2843                           ;	CPD = OFF, Data memory code protection is disabled
  2844                           ;	Brown Out Reset Selection bits
  2845                           ;	BOREN = OFF, BOR disabled
  2846                           ;	Internal External Switchover bit
  2847                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2848                           ;	Fail-Safe Clock Monitor Enabled bit
  2849                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2850                           ;	Low Voltage Programming Enable bit
  2851                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2852                           ;	In-Circuit Debugger Mode bit
  2853                           ;	DEBUG = 0x1, unprogrammed default
  2854  2007                     	org	8199
  2855  2007  20D4               	dw	8404
  2856                           
  2857                           ;Config register CONFIG2 @ 0x2008
  2858                           ;	Brown-out Reset Selection bit
  2859                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2860                           ;	Flash Program Memory Self Write Enable bits
  2861                           ;	WRT = OFF, Write protection off
  2862  2008                     	org	8200
  2863  2008  3FFF               	dw	16383

Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LcdWriteString@value	PTR const unsigned char  size(2) Largest target is 17
		 -> uint8ToChar@salida(BANK0[4]), STR_1(CODE[17]), 

    sp__uint8ToChar	PTR unsigned char  size(1) Largest target is 4
		 -> uint8ToChar@salida(BANK0[4]), 

    main@adcChar	PTR unsigned char  size(1) Largest target is 4
		 -> uint8ToChar@salida(BANK0[4]), 


Critical Paths under _main in COMMON

    _uint8ToChar->___awdiv
    _UARTInit->___lldiv
    _LcdWriteString->_LcdWriteChar
    _LcdWriteChar->_LcdPort
    _LcdSetCursor->_LcdCmd
    _LcdInit->_LcdCmd
    _LcdCmd->_LcdPort

Critical Paths under _main in BANK0

    _main->_UARTInit

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3771
                                              9 BANK0      3     3      0
                            _LcdInit
                       _LcdSetCursor
                     _LcdWriteString
                           _UARTInit
                            _spiInit
                            _spiRead
                           _spiWrite
                        _uint8ToChar
 ---------------------------------------------------------------------------------
 (1) _uint8ToChar                                          9     9      0    1429
                                              9 COMMON     3     3      0
                                              0 BANK0      6     6      0
                            ___awdiv
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             9     4      5     684
                                              0 BANK0      9     4      5
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     466
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _LcdWriteString                                       7     5      2     440
                                              4 COMMON     7     5      2
                       _LcdWriteChar
 ---------------------------------------------------------------------------------
 (2) _LcdWriteChar                                         2     2      0     198
                                              2 COMMON     2     2      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (1) _LcdSetCursor                                         4     3      1     416
                                              5 COMMON     4     3      1
                             _LcdCmd
 ---------------------------------------------------------------------------------
 (1) _LcdInit                                              2     2      0     374
                                              5 COMMON     2     2      0
                             _LcdCmd
                            _LcdPort
 ---------------------------------------------------------------------------------
 (2) _LcdCmd                                               3     3      0     198
                                              2 COMMON     3     3      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (3) _LcdPort                                              2     2      0     176
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdInit
     _LcdCmd
       _LcdPort
     _LcdPort
   _LcdSetCursor
     _LcdCmd
       _LcdPort
   _LcdWriteString
     _LcdWriteChar
       _LcdPort
   _UARTInit
     ___lldiv
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _uint8ToChar
     ___awdiv
     ___awmod
     ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C       C       5       15.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Feb 14 19:51:33 2021

      UARTInit@baud_rate 0020                        pc 0002           ___bmul@product 0072  
            _SSPSTATbits 0094                       l39 05C8                       l58 0771  
           ___awdiv@sign 0076                       fsr 0004                      l115 07FB  
                    l131 0511                      l140 04CC                      l118 0467  
                    l134 0422                      l302 062E                      l128 048A  
                    l162 0448                      l163 044D                      l180 040D  
                    l172 03FD                      l166 03FE                      l432 056A  
                    l169 0404                      l419 0695                      l292 0437  
                    _RD0 0040                      _RD1 0041                      _RD2 0042  
                    _RE0 0048                      _RD3 0043                      _RE1 0049  
                    _RD4 0044                      _RD5 0045                      _RD6 0046  
                    _RD7 0047                      u710 078C                      u711 0788  
                    u800 07C2                      u801 07BE                      u705 0780  
                    u740 079E                      u724 078F                      u741 079A  
                    u830 07D4                      u814 07C5                      u910 0404  
                    u831 07D0                      u735 0792                      u911 0403  
                    u904 07FB                      u680 077A                      u920 0429  
                    u825 07C8                      u681 0776                      u921 0428  
                    u770 07B0                      u754 07A1                      u930 0436  
                    u771 07AC                      u931 0435                      u860 07E6  
                    u844 07D7                      u940 05D9                      u861 07E2  
                    u765 07A4                      u941 05D8                      u694 077D  
                    u855 07DA                      u784 07B3                      u960 05ED  
                    u961 05EC                      u890 07F8                      u874 07E9  
                    u891 07F4                      u795 07B6                      u955 05DE  
                    u980 0608                      u885 07EC                      u981 0607  
                    u975 05EF                      u985 0604                      u995 0618  
            main@adcChar 002B                      fsr0 0004                      indf 0000  
           ___awmod@sign 0076                     l1112 0773                     l1120 0458  
                   l1200 065E                     l1114 077D                     l1122 045B  
                   l1130 0418                     l1210 0681                     l1202 0662  
                   l1124 0464                     l1116 044F                     l1132 041B  
                   l1300 076B                     l1204 0673                     l1212 0687  
                   l1220 0512                     l1140 0425                     l1118 0452  
                   l1310 046A                     l1134 041F                     l1126 040F  
                   l1302 076C                     l1214 068C                     l1206 0679  
                   l1230 0522                     l1222 0513                     l1142 0429  
                   l1312 0472                     l1128 0412                     l1160 05ED  
                   l1152 05C9                     l1304 076D                     l1136 03FE  
                   l1216 0691                     l1208 067A                     l1240 053B  
                   l1232 0527                     l1224 0517                     l1144 042D  
                   l1322 048B                     l1170 0620                     l1162 05F6  
                   l1154 05D9                     l1306 0770                     l1330 03F9  
                   l1242 053F                     l1234 052D                     l1250 055C  
                   l1226 051C                     l1146 042F                     l1138 0424  
                   l1404 0482                     l1316 047A                     l1308 0469  
                   l1324 048E                     l1164 0608                     l1156 05DC  
                   l1172 0626                     l1260 0440                     l1332 0405  
                   l1180 0634                     l1252 0561                     l1244 0549  
                   l1236 0530                     l1228 051E                     l1148 0436  
                   l1340 0584                     l1270 04D3                     l1326 04AA  
                   l1166 0616                     l1158 05E9                     l1262 0442  
                   l1334 040A                     l1190 0648                     l1182 0639  
                   l1254 0566                     l1246 054F                     l1238 0537  
                   l1350 05C7                     l1342 0589                     l1272 04DC  
                   l1328 04B0                     l1168 0617                     l1280 070A  
                   l1264 0444                     l1192 064A                     l1184 063B  
                   l1176 062F                     l1248 0556                     l1344 0598  
                   l1360 06AD                     l1274 04EA                     l1290 0764  
                   l1282 0735                     l1266 0447                     l1258 0439  
                   l1194 0650                     l1186 063F                     l1178 0630  
                   l1346 05AF                     l1338 056E                     l1370 06DB  
                   l1362 06BE                     l1354 0696                     l1276 04F0  
                   l1268 04CD                     l1292 0765                     l1284 0737  
                   l1196 0653                     l1188 0644                     l1348 05C6  
                   l1372 06E1                     l1364 06C6                     l1356 069F  
                   l1294 0766                     l1286 0762                     l1278 0703  
                   l1198 065A                     l1374 06EB                     l1366 06CF  
                   l1358 06A8                     l1296 0769                     l1288 0763  
                   l1376 06F6                     l1368 06D7                     l1298 076A  
                   STR_1 0013                     u1000 0626                     u1001 0625  
                   u1010 0634                     u1011 0633                     u1100 068C  
                   u1020 063F                     u1101 068B                     u1021 063E  
                   u1030 0650                     u1110 0517                     u1031 064F  
                   u1111 0516                     u1200 0440                     u1120 0522  
                   u1201 043F                     u1121 0521                     u1210 070A  
                   u1050 0662                     u1130 052D                     u1211 0709  
                   u1051 0661                     u1131 052C                     u1220 0718  
                   u1045 0654                     u1230 0745                     u1070 0673  
                   u1150 053F                     u1071 0672                     u1151 053E  
                   u1240 0498                     u1160 0549                     u1225 0713  
                   u1065 0663                     u1161 0548                     u1145 0531  
                   u1250 04BA                     u1090 0687                     u1307 04F4  
                   u1235 0740                     u1091 0686                     u1075 066F  
                   u1260 04CC                     u1180 055C                     u1317 045F  
                   u1261 04CB                     u1085 067B                     u1181 055B  
                   u1165 0545                     u1190 0561                     u1191 0560  
                   u1175 0550                     u1277 041D                     u1287 04D7  
                   u1297 04E6                     _main 0696                     btemp 007E  
                   start 0000          LcdSetCursor@row 0078          __end_of_LcdInit 0512  
        __end_of_LcdPort 07FC        ___bmul@multiplier 0073         uint8ToChar@value 0025  
   __end_of_LcdSetCursor 048B                    ?_main 0070          __end_of___awdiv 0696  
        __end_of___awmod 056B                    _ANSEL 0188          __end_of___lldiv 062F  
        ___awdiv@divisor 0070          ___awdiv@counter 0075                    _RCREG 001A  
                  _SPBRG 0099                    _PORTA 0005                    _TRISA 0085  
                  _TRISD 0088                    _TRISE 0089                    _TXREG 0019  
       __end_of_UARTInit 0772                    pclath 000A          __end_of_spiInit 044E  
        __end_of_spiRead 040E                    status 0003                    wtemp0 007E  
   __end_of_LcdWriteChar 0423          __initialization 07FC             __end_of_main 0703  
      uint8ToChar@salida 0020                   ??_main 0029         ___awdiv@dividend 0072  
                 _ANSELH 0189                ??_LcdInit 0075                ??_LcdPort 0070  
                 _TRISC3 043B                   _TRISC5 043D                   _SSPCON 0014  
                 _SSPBUF 0013                   _LcdCmd 044E                   ___bmul 0423  
              ??___awdiv 0074                ??___awmod 0074                ??___lldiv 0078  
       ___awdiv@quotient 0077          ___awmod@divisor 0070             ?_uint8ToChar 0070  
        ___awmod@counter 0075         __end_of_spiWrite 03FE                ??_spiInit 0073  
              ??_spiRead 0070  __end_of__initialization 07FC  __size_of_LcdWriteString 0042  
  __size_of_LcdSetCursor 0023      ___bmul@multiplicand 0070        LcdWriteChar@value 0073  
         __pcstackCOMMON 0070                ?_UARTInit 0020    __size_of_LcdWriteChar 0015  
           _LcdSetCursor 0468                  ?_LcdCmd 0070               __pmaintext 0696  
                ?___bmul 0070               ??_UARTInit 0025  __size_of_spiReceiveWait 0007  
           _LcdWriteChar 040E                  _SSPSTAT 0094               __stringtab 0003  
                _LcdInit 04CD                  _LcdPort 0772          __size_of_LcdCmd 001A  
              ?_spiWrite 0070          __size_of___bmul 0015                  ___awdiv 062F  
                ___awmod 0512                  ___lldiv 05C9                  __ptext1 056B  
                __ptext2 0423                  __ptext3 0512                  __ptext4 062F  
                __ptext5 03F8                  __ptext6 0405                  __ptext7 03FE  
                __ptext8 0438                  __ptext9 0703     __size_of_uint8ToChar 005E  
       ___awmod@dividend 0072                  _spiInit 0438                  _spiRead 0405  
                main@adc 002A     end_of_initialization 07FC           _LcdWriteString 048B  
        ___lldiv@divisor 0070          ___lldiv@counter 007D                _RCSTAbits 0018  
             ??_spiWrite 0070                _TRISCbits 0087       LcdSetCursor@column 0075  
 __end_of_LcdWriteString 04CD              spiWrite@dat 0070                _TXSTAbits 0098  
         __end_of_LcdCmd 0468          uint8ToChar@temp 0024           _spiReceiveWait 03FE  
         __end_of___bmul 0438        __size_of_UARTInit 006F      start_initialization 07FC  
        ?_LcdWriteString 0074                 ??_LcdCmd 0072   __end_of_spiReceiveWait 0405  
               ??___bmul 0071                ___latbits 0002            __pcstackBANK0 0020  
               ?_LcdInit 0070                 ?_LcdPort 0070          ?_spiReceiveWait 0070  
               ?___awdiv 0070                 ?___awmod 0070                 ?___lldiv 0070  
      __size_of_spiWrite 0006                __pstrings 0003                 ?_spiInit 0070  
               ?_spiRead 0070     spiInit@sTransmitEdge 0072       spiInit@sDataSample 0070  
               _PIR1bits 000C                 _UARTInit 0703            ??_uint8ToChar 0079  
            __stringbase 0012         __size_of_LcdInit 0045         __size_of_LcdPort 008A  
           LcdPort@value 0071             UARTInit@BRGH 0024              LcdCmd@value 0074  
       __size_of___awdiv 0067         __size_of___awmod 0059         __size_of___lldiv 0066  
     __end_of__stringtab 0013         ??_LcdWriteString 0076      __end_of_uint8ToChar 05C9  
               __ptext10 05C9                 __ptext11 048B                 __ptext12 040E  
               __ptext13 0468                 __ptext14 04CD                 __ptext15 044E  
               __ptext16 0772         __size_of_spiInit 0016         __size_of_spiRead 0009  
          ?_LcdSetCursor 0075            __size_of_main 006D                 _spiWrite 03F8  
        LcdWriteString@i 0079             spiInit@sType 0073        spiInit@sClockIdle 0071  
          ?_LcdWriteChar 0070           ??_LcdSetCursor 0076         ___lldiv@dividend 0074  
       ??_spiReceiveWait 0070                stringcode 000D              _uint8ToChar 056B  
         ??_LcdWriteChar 0072         ___lldiv@quotient 0079                 stringdir 000D  
               stringtab 0003      LcdWriteString@value 0074  
